{"version":3,"sources":["images/delete.svg","images/edit.svg","helpers/api.ts","helpers/posts.ts","helpers/comments.ts","store/postsReducer.ts","store/commentsReducer.ts","store/loading.ts","store/message.ts","store/index.ts","components/Filters/Filters.tsx","components/PostsList/PostsList.tsx","components/Comments/Comments.tsx","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","App.tsx","helpers/users.ts","index.tsx"],"names":["module","exports","BASE_URL","request","url","options","fetch","then","res","ok","Error","status","statusText","json","getPostDetails","postId","getPostComments","getComment","commentId","initialState","posts","post","selectedPostId","userId","users","setPostId","type","value","getSelectedUserId","state","fetchPosts","dispatch","getPosts","comments","commentsEdit","commentEdit","commentsHidden","commentsUpdated","setPostComments","setCommentEdit","setCommentsUpdated","addComment","comment","console","log","method","headers","body","JSON","stringify","addPostComment","editComment","editPostComment","removeComment","removePostComment","updatePostComments","newComment","map","id","reducer","loading","action","message","rootReducer","combineReducers","loadingReducer","messageReducer","postsState","commentsState","isLoading","getMessage","getUsersList","getPostsList","getSelectedPostId","getPost","getPostCommentsEdit","getPostCommentEdit","arePostCommentsHidden","arePostCommentsUpdated","store","createStore","composeWithDevTools","applyMiddleware","thunk","Filters","useState","queryTitle","setQueryTitle","location","useLocation","history","useHistory","searchParams","URLSearchParams","search","useSelector","useDispatch","applyQuery","useCallback","debounce","newQuery","set","delete","push","toString","handleSelect","event","currentTarget","Number","setSelectedUserId","name","placeholder","className","onChange","ev","user","key","PostsList","selectedUserId","get","useEffect","filteredPosts","filter","title","includes","toLowerCase","isPostListEmpty","length","onClick","Comments","React","memo","areCommentsUpdated","fetchPostComments","removeCommentHandler","a","editCommentHandler","preventDefault","src","editIcon","alt","deleteIcon","NewCommentForm","initialValues","email","setNewComment","handleChangeInput","e","target","prev","addCommentHandler","date","Date","now","newId","substr","onSubmit","isFormValid","validateForm","PostDetails","areCommentsHidden","Promise","all","commentsCount","reason","error","fetchPost","App","result","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6d75face.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/delete.d4a3dcc3.svg\";","module.exports = __webpack_public_path__ + \"static/media/edit.a5ec2c5e.svg\";","export const BASE_URL = 'https://mate.academy/students-api/';\n\nexport const request = (url: string = '', options?: object) => {\n  return fetch(BASE_URL + url, options).then((res) => {\n    if (!res.ok) {\n      throw new Error(`${res.status}: ${res.statusText}`);\n    }\n\n    return res.json();\n  });\n};\n\nexport function fetchMessage(): Promise<string> {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve('Message from server');\n    }, 2000);\n  });\n}\n","import { request } from './api';\n\nexport function getPosts(userId? : number) {\n  if (userId) {\n    return request(`posts?userId=${userId}`);\n  }\n  \n  return request('posts?id=87&id=88&id=89&id=90&id=91&id=92&id=93');\n}\n\nexport function getPostDetails(postId : number) {\n  return request(`posts/${postId}`);\n}\n","import { request } from './api';\nimport { Comment } from '../types';\n\nexport function getPostComments(postId: number): Promise<Comment[]> {\n  return request(`comments?postId=${postId}`);\n}\n\nexport function getComment(commentId: number): Promise<Comment> {\n  return request(`comments/${commentId}`);\n}\n\nexport function removePostComment(commentId: number) {\n  return request(`comments/${commentId}`, {\n    method: 'DELETE',\n  });\n}\n\nexport function editPostComment(commentId: number, comment: Comment) {\n  return request(`comments/${commentId}`, {\n    method: 'PATCH',\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify(comment),\n  });\n};\n\nexport function addPostComment(comment: Comment) {\n  return request('comments', {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify(comment),\n  });\n};\n","import { AnyAction, Dispatch } from 'redux';\n\nimport { Post, PostMain, User } from '../types';\nimport { getPosts, getPostDetails } from '../helpers/posts';\nimport { getPostComments } from '../helpers/comments';\n\nexport type RootState = {\n  posts: any,\n  post: PostMain | null;\n  selectedPostId: number,\n  userId: number,\n  users: User[]\n}\n\nconst initialState: RootState = {\n  posts: [],\n  post: null,\n  selectedPostId: 0,\n  userId: 0,\n  users: [],\n}\n\nconst SET_USERID = 'SET_USERID';\nconst SET_USERS = 'SET_USERS';\nconst SET_POSTS = 'SET_POSTS';\nconst SET_POST = \"SET_POST\";\nconst SET_POSTID = 'SET_POSTID';\n\n// Action creators\nexport const setSelectedUserId = (userId: number) => ({ type: SET_USERID, value: userId });\nexport const setUsersList = (users: User[]) => ({ type: SET_USERS, value: users });\nexport const setPosts = (posts: Post[]) => ({ type: SET_POSTS, posts });\nexport const setPost = (post: PostMain) => ({ type: SET_POST, post });\nexport const setPostId = (selectedPostId: number) => ({ type: SET_POSTID, value: selectedPostId });\n\n// Selectors\nexport const getSelectedUserId = (state: RootState) => state.userId;\nexport const getPostId = (state: RootState) => state.selectedPostId;\n\nexport const fetchPosts = (\n  // setIsLoading: React.Dispatch<React.SetStateAction<boolean>>,\n  userId?: number\n) => (dispatch: Dispatch) => {\n  // setIsLoading(true);\n  getPosts(userId).then((res: any) => {\n    dispatch(setPosts(res)); // res.data\n    // setIsLoading(false);\n  });\n};\n\nexport const fetchPost = (\n  postId: number,\n  // setIsLoading: React.Dispatch<React.SetStateAction<boolean>>\n) => (dispatch: Dispatch) => {\n  // setLoading(true);\n  // console.log(typeof request2, typeof dispatch, id);\n  Promise.all([getPostDetails(postId), getPostComments(postId)]).then(res => {\n    // const postDetails = {\n    //   ...res,\n    //   commentsCount: 22\n    // };\n    dispatch(setPost({\n      ...res[0],\n      commentsCount: res[1].length\n    }));\n  }, reason => {\n    console.error(`Failed to fetch details of post ${postId}.`, reason);\n  });\n  // getPostDetails(postId).then((res: any) => {\n  //   postDetails = res;\n  //   getPostComments(postId)\n  // });\n\n  //dispatch(setPost(res));\n};\n\nexport const postsReducer = (state = initialState, action: AnyAction) => {\n  switch (action.type) {\n    case SET_USERID:\n      return {\n        ...state,\n        userId: action.value\n      }\n\n    case SET_USERS:\n      return {\n        ...state,\n        users: action.value\n      }\n    \n    case SET_POSTS:\n      return {\n        ...state,\n        posts: action.posts\n      };\n    \n    case SET_POST:\n      return {\n        ...state,\n        post: action.post\n      };\n\n    case SET_POSTID:\n      return {\n        ...state,\n        selectedPostId: action.value\n      };\n\n    default:\n      return state;\n  }\n}\n","import { AnyAction, Dispatch } from 'redux';\n\nimport { Comment, CommentsEdit } from '../types';\nimport { getPostComments, addPostComment, removePostComment, editPostComment } from '../helpers/comments';\n\nexport interface RootStateComments {\n  comments: Comment[] | null;\n  commentsEdit: CommentsEdit;\n  commentEdit: Comment | null;\n  commentsHidden: boolean;\n  commentsUpdated: boolean;\n};\n\nconst initialState: RootStateComments = {\n  comments: null,\n  commentsEdit: [],\n  commentEdit: null,\n  commentsHidden: false,\n  commentsUpdated: false,\n};\n\nconst SET_POST_COMMENTS = 'SET_POST_COMMENTS';\nconst SET_NEW_COMMENT = 'SET_NEW_COMMENT';\nconst SET_COMMENTS_HIDDEN = 'SET_COMMENTS_HIDDEN';\nconst SET_COMMENTS_UPDATED = 'SET_COMMENTS_UPDATED';\nconst SET_COMMENTS_EDIT = 'SET_COMMENTS_EDIT';\nconst SET_COMMENT_EDIT = 'SET_COMMENT_EDIT';\n\n// Action creators\nexport const setPostComments = (comments: Comment[] | null) => ({ type: SET_POST_COMMENTS, comments });\nexport const setNewComment = (comment: Comment) => ({ type: SET_NEW_COMMENT, comment });\nexport const setCommentsEdit = (commentId: number) => ({ type: SET_COMMENTS_EDIT, commentId });\nexport const setCommentEdit = (commentEdit: Comment | null) => ({ type: SET_COMMENT_EDIT, commentEdit });\nexport const setCommentsHidden = (commentsHidden: boolean) => ({ type: SET_COMMENTS_HIDDEN, commentsHidden });\nexport const setCommentsUpdated = (commentsUpdated: boolean) => ({ type: SET_COMMENTS_UPDATED, commentsUpdated });\n\nexport const fetchPostComments = (postId: number) => (dispatch: Dispatch) => {\n  getPostComments(postId)\n    .then((res: Comment[] | null) => {\n      if (res) {\n        dispatch(setPostComments(res));\n      } else {\n        dispatch(setPostComments(null));\n      }\n    });\n};\n\nexport const addComment = (comment: Comment) => {\n  console.log('POST');\n  addPostComment(comment);\n};\n\nexport const editComment = (commentId: number, comment: Comment) => {\n  console.log('PATCH');\n  editPostComment(commentId, comment);\n};\n\nexport const removeComment = (commentId: number) => {\n  console.log('DELETE', commentId);\n  removePostComment(commentId);\n}\n\nconst updatePostComments= (comments: Comment[] | null, newComment: Comment) => {\n  if (!comments) {\n    return null;\n  }\n\n  return comments.map(comment => {\n    if (comment.id !== newComment.id) {\n      return newComment;\n    }\n\n    return {\n      ...comment\n    }\n  })\n}\n\n// const updatePostCommentsEdit= (commentsIds: CommentsEdit, newCommentId: number) => {\n//   if (!commentsIds.length) {\n//     return [];\n//   }\n\n//   return commentsIds.map(commentId => {\n//     if (commentId !== newCommentId) {\n//       return newCommentId;\n//     }\n\n//     return [\n//       ...commentsIds\n//     ]\n//   })\n// }\n\nexport const commentsReducer = (state = initialState, action: AnyAction) => {\n  switch (action.type) {\n    case SET_POST_COMMENTS:\n      return {\n        ...state,\n        comments: action.comments\n      };\n\n    case SET_COMMENTS_EDIT:\n      console.log('11 action.commentId', action.commentId)\n      return {\n        ...state,\n        commentsEdit: [\n          ...state.commentsEdit,\n          action.commentId\n        ]\n      }\n\n    case SET_COMMENT_EDIT:\n      console.log('commentEdit', action.commentEdit)\n      return {\n        ...state,\n        commentEdit: action.commentEdit\n      };\n\n    case SET_NEW_COMMENT:\n      return {\n        ...state,\n        comments: updatePostComments(state.comments, action.comment),\n      };\n\n    case SET_COMMENTS_HIDDEN:\n      console.log(action.commentsHidden, 'action.commentsHidden');\n      return {\n        ...state,\n        commentsHidden: action.commentsHidden\n      };\n\n    case SET_COMMENTS_UPDATED:\n      return {\n        ...state,\n        commentsUpdated: action.commentsUpdated\n      };\n\n    default:\n      return state;\n  }\n}\n","import { AnyAction } from 'redux';\n\n// Action types\nconst START_LOADING = 'START_LOADING';\nconst FINISH_LOADING = 'FINISH_LOADING';\n\n// Action creators\nexport const startLoading = () => ({ type: START_LOADING });\nexport const finishLoading = () => ({ type: FINISH_LOADING });\n\nconst reducer = (loading = false, action: AnyAction) => {\n  switch (action.type) {\n    case START_LOADING:\n      return true;\n\n    case FINISH_LOADING:\n      return false;\n\n    default:\n      return loading;\n  }\n};\n\nexport default reducer;\n","import { AnyAction } from 'redux';\n\n// Action types\nconst SET_MESSAGE = 'SET_MESSAGE';\n\n// Action creators\nexport const setMessage = (message: string) => ({ type: SET_MESSAGE, message });\n\n// message reducer receives only the `state.message` part, but not the entire Redux state\nconst reducer = (message = '', action: AnyAction) => {\n  switch (action.type) {\n    case SET_MESSAGE:\n      return action.message;\n\n    default:\n      return message;\n  }\n};\n\nexport default reducer;\n","import { createStore, combineReducers, Dispatch, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport { postsReducer } from './postsReducer';\nimport { commentsReducer } from './commentsReducer';\n\nimport loadingReducer, { finishLoading, startLoading } from './loading';\nimport messageReducer, { setMessage } from './message';\nimport { fetchMessage } from '../helpers/api';\n\n// Action types\nconst SET_LOADING = 'SET_LOADING';\n\nconst rootReducer = combineReducers({\n  loading: loadingReducer,\n  message: messageReducer,\n  postsState: postsReducer,\n  commentsState: commentsReducer,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\n// Action creators\nexport const setLoading = (loading: boolean) => ({ type: SET_LOADING, value: loading });\n\n// Selectors\nexport const isLoading = (state: RootState) => state.loading;\nexport const getMessage = (state: RootState) => state.message;\nexport const getUsersList = (state: RootState) => state.postsState.users;\nexport const getPostsList = (state: RootState) => state.postsState.posts;\nexport const getSelectedPostId = (state: RootState) => state.postsState.selectedPostId;\nexport const getPost = (state: RootState) => state.postsState.post;\nexport const getPostComments = (state: RootState) => state.commentsState.comments;\nexport const getPostCommentsEdit = (state: RootState) => state.commentsState.commentsEdit;\nexport const getPostCommentEdit = (state: RootState) => state.commentsState.commentEdit;\nexport const arePostCommentsHidden = (state: RootState) => state.commentsState.commentsHidden;\nexport const arePostCommentsUpdated = (state: RootState) => state.commentsState.commentsUpdated;\n\n/**\n * Thunk\n *\n * dispatch(loadMessage())\n */\nexport const loadMessage = () => {\n  // inner function is an action handled by Redux Thunk\n  return async (dispatch: Dispatch<any>) => {\n    dispatch(startLoading());\n\n    try {\n      const message = await fetchMessage();\n\n      dispatch(setMessage(message));\n    } catch (error) {\n      dispatch(setMessage('Error occurred when loading data'));\n    }\n\n    dispatch(finishLoading());\n  };\n};\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk)),\n);\n\nexport default store;\n","import React, { useState, useCallback } from 'react';\nimport { useLocation, useHistory } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getSelectedUserId, setSelectedUserId } from '../../store/postsReducer';\nimport { getUsersList } from '../../store'\n\nimport debounce from 'lodash/debounce.js';\n\nimport { User } from '../../types';\n\nexport const Filters: React.FC = () => {\n  const [queryTitle, setQueryTitle] = useState('');\n  const location = useLocation();\n  const history = useHistory();\n  const searchParams = new URLSearchParams(location.search);\n\n  const userId = useSelector(getSelectedUserId);\n  const users: User[] = useSelector(getUsersList);\n\n  const dispatch = useDispatch();\n\n  const applyQuery = useCallback(\n    debounce((newQuery: string | null) => {\n      if (newQuery) {\n        searchParams.set('query', newQuery);\n      } else {\n        searchParams.delete('query');\n      }\n\n      history.push({ search: searchParams.toString() });\n    }, 350), [],\n  );\n\n  var handleChange = function(ev: React.ChangeEvent<HTMLInputElement>) {\n    const value = ev.currentTarget.value;\n    setQueryTitle(value);\n    applyQuery(value);\n  }\n\n  var handleSelect = useCallback((event: React.ChangeEvent<HTMLSelectElement>) => {\n    const value = event.currentTarget.value;\n\n    if (Number(value) > 0) {\n      searchParams.set('userId', value);\n      dispatch(setSelectedUserId(Number(value)));\n    } else {\n      searchParams.delete('userId');\n    }\n    history.push({ search: searchParams.toString() });\n  }, [userId, dispatch]);\n\n  if (users) {\n    return (\n      <>\n        <label>\n          Title: &nbsp;\n          <input\n            type=\"text\"\n            name=\"title\"\n            value={queryTitle}\n            placeholder=\"Filter by title\"\n            className=\"App__header-filter\"\n            onChange={handleChange}\n          />\n        </label>\n\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            name=\"user\"\n            className=\"App__user-selector\"\n            value={userId}\n            onChange={handleSelect}\n          >\n            <option value=\"\">\n              Choose a user\n            </option>\n            {users.map((user: any) => (\n              <option value={user.id} key={user.id}>\n                {user.name}\n              </option>\n            ))}\n          </select>\n        </label>\n      </>\n    )\n  } else {\n    return (\n      <div className=\"App__loading-message\">Loading data...</div>\n    )\n  }\n}\n","import React, { useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport './PostsList.scss';\n\nimport {\n  getPostsList,\n  getSelectedPostId,\n} from '../../store';\nimport { fetchPosts, setPostId } from '../../store/postsReducer';\n\nimport { Post } from '../../types';\nimport { setPostComments } from '../../store/commentsReducer';\n\nexport const PostsList: React.FC = () => {\n  const posts: Post[] = useSelector(getPostsList);\n  const postId = useSelector(getSelectedPostId);\n\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search);\n  const selectedUserId = Number(searchParams.get('userId')) || 0;\n  const queryTitle = searchParams.get('query') || null;\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (selectedUserId > 0) {\n      console.log('userId and selectedUserId in useEffect 1', selectedUserId);\n      dispatch(fetchPosts(selectedUserId));\n    } else {\n      console.log('userId and selectedUserId in useEffect 2', selectedUserId);\n      dispatch(fetchPosts());\n    }\n  }, [selectedUserId, dispatch]);\n\n  const filteredPosts = (queryTitle ? posts.filter(post => post.title.includes(queryTitle.toLowerCase())) : posts);\n  const isPostListEmpty = posts ? (posts.length ? false : true) : true;\n\n  console.log('filteredPosts.length', filteredPosts.length);\n\n  return (\n    <div className=\"PostsList\">\n      {isPostListEmpty ? (\n        <p className=\"info\">Posts list is empty.</p>\n      ) : (\n        <>\n          <h2>Posts:</h2>\n          <ul className=\"PostsList__list\">\n            {filteredPosts.map((post: any) => (\n              <li className=\"PostsList__item\" key={post.id}>\n                <div className=\"PostsList__item-content\">\n                  <h3>{post.title}</h3>\n                  <p>{post.body}</p>\n                </div>\n                {postId !== post.id ? (\n                  <button\n                    type=\"button\"\n                    className=\"PostsList__button button\"\n                    onClick={() => {\n                      dispatch(setPostId(post.id))\n                    }}\n                  >\n                    Open\n                  </button>\n                ) : (\n                  <button\n                    type=\"button\"\n                    className=\"PostsList__button button button--active\"\n                    onClick={() => {\n                      dispatch(setPostId(0));\n                      dispatch(setPostComments(null));\n                    }}\n                  >\n                    Close\n                  </button>\n                )}\n              </li>\n            ))}\n          </ul>\n        </>\n      )}\n    </div>\n  );\n};\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport deleteIcon from '../../images/delete.svg';\nimport editIcon from '../../images/edit.svg';\n// import { getPostDetails } from '../../helpers/posts';\n// import { getPostComments, removeComment, addPostComment } from '../../api/comments';\n\nimport { getComment } from '../../helpers/comments';\n\nimport {\n  getPostComments,\n  getPostCommentsEdit,\n  arePostCommentsUpdated\n} from '../../store'; // isLoading\nimport {\n  fetchPostComments,\n  setCommentEdit,\n  setCommentsUpdated,\n  removeComment\n} from '../../store/commentsReducer'\n\nimport { Comment, CommentsEdit } from '../../types';\n\ntype Props = {\n  postId: number,\n};\n\nexport const Comments: React.FC<Props> = React.memo(({ postId }) => {\n  // const [commentHidden, setCommentHidden] = useState(false);\n  const comments: Comment[] | null = useSelector(getPostComments);\n  const areCommentsUpdated: boolean = useSelector(arePostCommentsUpdated);\n  const commentsEdit: CommentsEdit = useSelector(getPostCommentsEdit);\n\n  const dispatch = useDispatch();\n  // const loading = useSelector(isLoading);\n\n  useEffect(() => {\n    if (postId > 0) {\n      dispatch(fetchPostComments(postId));\n      console.log('Comments useeffect postId', postId, areCommentsUpdated);\n      dispatch(setCommentEdit(null));\n    }\n\n    if (areCommentsUpdated) {\n      console.log('Comments commentsUpdated is true in useeffect', postId, areCommentsUpdated);\n      dispatch(setCommentsUpdated(false));\n    }\n  }, [postId, areCommentsUpdated, dispatch]);\n\n  const removeCommentHandler = async (commentId: number) => {\n    // setIsLoading(true);\n    await removeComment(commentId);\n    // dispatch(fetchPost(postId));\n    dispatch(setCommentsUpdated(true));\n  };\n\n  const editCommentHandler = async (commentId: number) => {\n    const comment = await getComment(commentId);\n    dispatch(setCommentEdit(comment));\n  };\n\n  // console.log(comments, 333);\n  // console.log('Comments commentsUpdated is ', commentsUpdated, postId);\n  // console.log(comments, (comments && comments.length));\n\n  // const removeCommentHandler = (commentId: number) => {\n    \n  //   dispatch(removeComment(commentId));\n  // }\n  if (comments) {\n    console.log(comments, 'commentsEdit', commentsEdit);\n    return (\n      <ul className=\"PostDetails__list\">\n        {comments.map(comment => (\n          <li className=\"PostDetails__list-item\" key={comment.id}>\n            <span>{comment.body} <sub>{comment.id} post {postId}</sub></span>\n            <div>\n              {commentsEdit.includes(comment.id) && (\n                <button\n                  type=\"button\"\n                  className=\"button button--icon\"\n                  onClick={(ev) => {\n                    ev.preventDefault();\n\n                    console.log('edit');\n                    editCommentHandler(comment.id);\n                  }}\n                >\n                  <img src={editIcon} alt=\"edit icon\"></img>\n                </button>\n              )}\n              <button\n                type=\"button\"\n                className=\"button button--icon\"\n                onClick={(ev) => {\n                  ev.preventDefault();\n\n                  if (comment.id) {\n                    removeCommentHandler(comment.id);\n                  }\n                }}\n              >\n                <img src={deleteIcon} alt=\"delete icon\"></img>\n              </button>\n            </div>\n          </li>\n        ))}\n      </ul>\n    )\n  } else {\n    return (\n      <p className=\"info\">No comments</p>\n    );\n  }\n});\n","import React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport './NewCommentForm.scss';\nimport { NewComment } from '../../types';\n\nimport { getPostCommentEdit } from '../../store/index';\nimport { addComment, setCommentsEdit, editComment, setCommentsUpdated } from '../../store/commentsReducer';\n\ninterface NewCommentFormProps {\n  postId: number;\n}\n\nexport const NewCommentForm: React.FC<NewCommentFormProps> = React.memo(({\n  postId,\n}) => {\n  const initialValues: NewComment = {\n    name: '',\n    email: '',\n    body: '',\n    postId: postId,\n  };\n\n  const [newComment, setNewComment] = useState<NewComment>(initialValues);\n  const commentEdit = useSelector(getPostCommentEdit);\n  \n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (commentEdit) {\n      console.log(111);\n      setNewComment({\n        ...initialValues,\n        name: commentEdit.name,\n        email: commentEdit.email,\n        body: commentEdit.body,\n      });\n    } else {\n      console.log(222);\n      setNewComment(initialValues);\n    }\n  }, [postId, commentEdit]);\n\n  const resetForm = () => {\n    setNewComment({\n      name: '',\n      email: '',\n      body: '',\n      postId: postId,\n    });\n  };\n\n  // ' ... ... ...   '.replace(/^\\s+|\\s+$/g, '')\n  const validateForm = (newComment: NewComment) => {\n    let isFormValid = true;\n    if (!newComment.name.length) {\n      isFormValid = false;\n    }\n\n    return isFormValid;\n  };\n\n  const handleChangeInput = (e: any) => {\n    const { name, value } = e.target;\n\n    setNewComment(prev => ({\n      ...prev,\n      [name]: value,\n    }));\n  };\n\n  const handleSubmitForm = (ev: React.FormEvent) => {\n    ev.preventDefault();\n\n    if (validateForm(newComment) === true) {\n      if (commentEdit) {\n        editCommentHandler(newComment);\n      } else {\n        addCommentHandler(newComment);\n      }\n      setNewComment(initialValues);\n      resetForm();\n    } else {\n      console.log('Write message');\n    }\n  };\n\n  const editCommentHandler = async (comment: NewComment) => {\n    const newComment = {\n      ...comment,\n      id: commentEdit.id,\n    };\n\n    console.log('Comment that has edited is ', newComment, commentEdit.id);\n\n    await editComment(commentEdit.id, newComment);\n    dispatch(setCommentsUpdated(true));\n  };\n\n  const addCommentHandler = async (comment: NewComment) => {\n    const date = Date.now().toString();\n    const newId = Number(date.substr(date.length - 6));\n    const newComment = {\n      ...comment,\n      id: newId,\n    };\n\n    console.log('new comment is ', newComment);\n\n    await addComment(newComment);\n    dispatch(setCommentsUpdated(true));\n    dispatch(setCommentsEdit(newId));\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={handleSubmitForm}\n      method=\"POST\"\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={newComment.name}\n          onChange={handleChangeInput}\n        />\n        {/* {errors.name\n          && <p className=\"NewCommentForm__error\">{errors.name.message}</p>\n        } */}\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={newComment.email}\n          onChange={handleChangeInput}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comments here\"\n          className=\"NewCommentForm__input\"\n          value={newComment.body}\n          // {...register('body', {\n          //   required: 'Message text is required.',\n          //   minLength: {\n          //     value: 5,\n          //     message: 'Minimal length of message text is 5.',\n          //   },\n          //   pattern: {\n          //     value: /^$|.*\\S+.*/,\n          //     message: 'Message should\\'t be made up of whitespaces.',\n          //   },\n          // })}\n          onChange={handleChangeInput}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n});\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { Comments } from '../Comments';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\n\nimport { getSelectedPostId, getPost, arePostCommentsHidden } from '../../store'; // isLoading\nimport { fetchPost } from '../../store/postsReducer';\nimport { setCommentsHidden } from '../../store/commentsReducer';\n\nimport { Post } from '../../types';\n\nexport const PostDetails: React.FC = () => {\n  const postId = useSelector(getSelectedPostId);\n  const post: Post | null = useSelector(getPost);\n  const areCommentsHidden: boolean = useSelector(arePostCommentsHidden);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (postId > 0) {\n      dispatch(fetchPost(postId));\n    }\n  }, [postId, dispatch]);\n\n  const toggleDisplayComment = (ev: React.MouseEvent<HTMLButtonElement>) => {\n    ev.preventDefault();\n\n    dispatch(setCommentsHidden(!areCommentsHidden));\n  };\n\n  console.log('ccc', areCommentsHidden, post);\n\n  return (\n    <div className=\"PostDetails\">\n      {postId > 0 && post ? (\n        <article className=\"PostDetails__post\">\n          <h2>{post.title}</h2>\n          <p>{post.body}</p>\n\n          <div className=\"PostDetails__post-comments\">\n            {post.commentsCount > 0 &&\n              <button\n                type=\"button\"\n                className=\"button\"\n                onClick={toggleDisplayComment}\n              >\n                {areCommentsHidden ? 'Show ' : 'Hide '}\n                comments\n              </button>\n            }\n\n            {!areCommentsHidden && (\n              <Comments postId={postId} />\n            )}\n            <div className=\"PostDetails__form-wrapper\">\n              <NewCommentForm\n                postId={postId}\n              />\n            </div>\n          </div>\n        </article>\n        ) : (\n        <p className=\"info\">No post details</p>\n      )}\n    </div>\n  );\n};\n","import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport './App.scss';\n\nimport { getUsers } from './helpers/users';\n\nimport { User } from './types';\nimport { isLoading, getMessage } from './store';\nimport { setUsersList } from './store/postsReducer';\n\nimport { Filters } from \"./components/Filters\";\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from \"./components/PostDetails\";\n\nconst App: React.FC = () => {\n  const loading = useSelector(isLoading);\n  const message = useSelector(getMessage) || 'Ready!';\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    getUsers()\n      .then((result: User[]|any) => dispatch(setUsersList(result)));\n  }, [dispatch]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <Filters />\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList />\n        </div>\n        <div className=\"App__content\">\n          <PostDetails />\n        </div>\n      </main>\n\n      \n      {loading ?\n        <div className=\"alert\">'Loading...'</div>\n      :\n        <div className=\"alert alert--fade-out\">{message}</div>}\n    </div>\n  );\n};\n\nexport default App;\n","import { request } from './api';\n\nexport function getUsers() {\n  return request('users');\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport App from './App';\nimport store from './store';\n\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}