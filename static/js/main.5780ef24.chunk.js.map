{"version":3,"sources":["images/delete.svg","helpers/api.ts","store/postsReducer.ts","store/commentsReducer.ts","store/loading.ts","store/message.ts","store/index.ts","components/Filters/Filters.tsx","components/PostsList/PostsList.tsx","components/Comments/Comments.tsx","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","App.tsx","helpers/users.ts","index.tsx"],"names":["module","exports","BASE_URL","request","url","options","fetch","then","res","ok","Error","status","statusText","json","initialState","posts","post","selectedPostId","userId","users","setPostId","type","value","getSelectedUserId","state","setPosts","fetchPosts","dispatch","data","comments","commentsUpdated","setPostComments","setCommentsUpdated","addPostComment","comment","console","log","bodyObj","method","headers","body","JSON","stringify","add","removePostComment","commentId","remove","updatePostComments","newComment","map","id","reducer","loading","action","message","rootReducer","combineReducers","loadingReducer","messageReducer","postsState","commentsState","isLoading","getMessage","getUsersList","getPostsList","getSelectedPostId","getPost","getPostComments","areCommentsUpdated","store","createStore","composeWithDevTools","applyMiddleware","thunk","Filters","location","useLocation","history","useHistory","searchParams","URLSearchParams","search","useSelector","useDispatch","handleChange","useCallback","Number","set","setSelectedUserId","delete","push","toString","name","className","onChange","e","target","user","key","PostsList","postId","selectedUserId","get","useEffect","isPostListEmpty","length","title","onClick","Comments","React","memo","fetchPostComments","removeCommentHandler","a","src","deleteIcon","alt","NewCommentForm","initialValues","email","useState","setNewComment","handleChangeInput","prev","submitForm","isFormValid","validateForm","addCommentHandler","date","Date","now","substr","onSubmit","preventDefault","placeholder","PostDetails","commentHidden","setCommentHidden","postInfo","commentsLength","App","result","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5780ef24.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/delete.d4a3dcc3.svg\";","export const BASE_URL = 'https://mate-api.herokuapp.com/';\n\n// export function request(url: string, options?: object) {\n//   return fetch(url, options)\n//     .then((response) => {\n//       if (!response.ok) {\n//         throw new Error(`Error ${response.status}: ${response.statusText}`);\n//       }\n\n//       return response.json();\n//     })\n//     .then(result => result.data);\n// }\n\nexport const request = (url: string = '', options?: object) => {\n  // console.log(BASE_URL + url);\n  return fetch(BASE_URL + url, options).then((res) => {\n    if (!res.ok) {\n      throw new Error(`${res.status}: ${res.statusText}`);\n    }\n\n    return res.json();\n  });\n};\n\nexport const add = (url: string = '', bodyObj: object) => {\n  console.log('add', 1);\n  request(url, {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify(bodyObj),\n  });\n};\n\nexport const remove = (url: string = '') => {\n  request(url, { method: 'DELETE' });\n};\n\nexport function fetchMessage(): Promise<string> {\n  // this is just a fake promise resolved in 2 seconds\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve('Message from server');\n    }, 2000);\n  });\n}\n","import { AnyAction, Dispatch } from 'redux';\n\nimport { Post, PostMain, User } from '../types';\nimport { request } from \"../helpers/api\";\n\nexport type RootState = {\n  posts: any,\n  post: PostMain | null;\n  selectedPostId: number,\n  userId: number,\n  users: User[]\n}\n\nconst initialState: RootState = {\n  posts: [],\n  post: null,\n  selectedPostId: 0,\n  userId: 0,\n  users: [],\n}\n\nconst SET_USERID = 'SET_USERID';\nconst SET_USERS = 'SET_USERS';\nconst SET_POSTS = 'SET_POSTS';\nconst SET_POST = \"SET_POST\";\nconst SET_POSTID = 'SET_POSTID';\n\n// Action creators\nexport const setSelectedUserId = (userId: number) => ({ type: SET_USERID, value: userId });\nexport const setUsersList = (users: User[]) => ({ type: SET_USERS, value: users });\nexport const setPostsList = (posts: Post[]) => ({ type: SET_POSTS, value: posts });\nexport const setPost = (post: PostMain) => ({ type: SET_POST, post });\nexport const setPostId = (selectedPostId: number) => ({ type: SET_POSTID, value: selectedPostId });\n\n// Selectors\nexport const getSelectedUserId = (state: RootState) => state.userId;\nexport const getPostId = (state: RootState) => state.selectedPostId;\n\nexport const setPosts = (posts: any[]) => ({ type: SET_POSTS, posts });\n\nexport const fetchPosts = (\n  // setIsLoading: React.Dispatch<React.SetStateAction<boolean>>,\n  userId?: number\n) => (dispatch: Dispatch) => {\n  // setIsLoading(true);\n  \n  if (userId) {\n    request(`posts?userId=${userId}`).then((res: any) => {\n      dispatch(setPosts(res.data));\n      // setIsLoading(false);\n    });\n  } else {\n    request('posts?id=87&id=88&id=89&id=90&id=91&id=92&id=93').then((res: any) => {\n      dispatch(setPosts(res.data));\n      // setIsLoading(false);\n    });\n  }\n};\n\nexport const fetchPost = (\n  id: number,\n  // setIsLoading: React.Dispatch<React.SetStateAction<boolean>>\n) => (dispatch: Dispatch) => {\n  // setLoading(true);\n  // console.log(typeof request2, typeof dispatch, id);\n  request(`posts/${id}`).then((res: any) => {\n    // console.log(res.data);\n    dispatch(setPost(res.data));\n    // setLoading(false);\n  });\n};\n\nexport const postsReducer = (state = initialState, action: AnyAction) => {\n  switch (action.type) {\n    case SET_USERID:\n      return {\n        ...state,\n        userId: action.value\n      }\n\n    case SET_USERS:\n      return {\n        ...state,\n        users: action.value\n      }\n    \n    case SET_POSTS:\n      return {\n        ...state,\n        posts: action.posts\n      };\n    \n    case SET_POST:\n      return {\n        ...state,\n        post: action.post\n      };\n\n    case SET_POSTID:\n      return {\n        ...state,\n        selectedPostId: action.value\n      };\n\n    default:\n      return state;\n  }\n}\n","import { AnyAction, Dispatch } from 'redux';\n\nimport { Comment } from '../types';\nimport { request, add, remove } from \"../helpers/api\";\n\nexport interface RootStateComments {\n  comments: Comment[] | null;\n  commentsUpdated: boolean;\n};\n\nconst initialState: RootStateComments = {\n  comments: null,\n  commentsUpdated: false,\n};\n\nconst SET_POST_COMMENTS = \"SET_POST_COMMENTS\";\nconst SET_NEW_COMMENT = \"SET_NEW_COMMENT\";\nconst SET_COMMENTS_UPDATED = \"SET_COMMENTS_UPDATED\";\n\n// Action creators\n\n// Selectors - a function receiving Redux state and returning some data from it\nexport const setPostComments = (comments: Comment[] | null) => ({ type: SET_POST_COMMENTS, comments });\nexport const setNewComment = (comment: Comment) => ({ type: SET_NEW_COMMENT, comment });\nexport const setCommentsUpdated = (commentsUpdated: boolean) => ({ type: SET_COMMENTS_UPDATED, commentsUpdated });\n\nexport const fetchPostComments = (\n  postId: number,\n) => (dispatch: Dispatch) => {\n  console.log(postId);\n  request(`comments?postId=${postId}`).then((res: any) => {\n    dispatch(setPostComments(res.data));\n  });\n};\n\nexport const addPostComment = (comment: Comment) => {\n  console.log('POST');\n  add('comments', comment);\n};\n\nexport const removePostComment = (commentId: number) => {\n  console.log('DELETE', commentId);\n  remove(`comments/${commentId}`);\n}\n\nconst updatePostComments= (comments: Comment[] | null, newComment: Comment) => {\n  if (!comments) {\n    return null;\n  }\n\n  return comments.map(comment => {\n    if (comment.id !== newComment.id) {\n      return newComment;\n    }\n\n    return {\n      ...comment\n    }\n  })\n}\n\nexport const commentsReducer = (state = initialState, action: AnyAction) => {\n  switch (action.type) {\n    case SET_POST_COMMENTS:\n      return {\n        ...state,\n        comments: action.comments\n      };\n\n    case SET_NEW_COMMENT:\n      return {\n        ...state,\n        comments: updatePostComments(state.comments, action.comment),\n        // comments: [\n        //   ...state.comments,\n        //   action.comment\n        // ]\n      };\n\n    case SET_COMMENTS_UPDATED:\n      return {\n        ...state,\n        commentsUpdated: action.commentsUpdated\n      };\n\n    default:\n      return state;\n  }\n}\n","import { AnyAction } from 'redux';\n\n// Action types\nconst START_LOADING = 'START_LOADING';\nconst FINISH_LOADING = 'FINISH_LOADING';\n\n// Action creators\nexport const startLoading = () => ({ type: START_LOADING });\nexport const finishLoading = () => ({ type: FINISH_LOADING });\n\nconst reducer = (loading = false, action: AnyAction) => {\n  switch (action.type) {\n    case START_LOADING:\n      return true;\n\n    case FINISH_LOADING:\n      return false;\n\n    default:\n      return loading;\n  }\n};\n\nexport default reducer;\n","import { AnyAction } from 'redux';\n\n// Action types\nconst SET_MESSAGE = 'SET_MESSAGE';\n\n// Action creators\nexport const setMessage = (message: string) => ({ type: SET_MESSAGE, message });\n\n// message reducer receives only the `state.message` part, but not the entire Redux state\nconst reducer = (message = '', action: AnyAction) => {\n  switch (action.type) {\n    case SET_MESSAGE:\n      return action.message;\n\n    default:\n      return message;\n  }\n};\n\nexport default reducer;\n","import { createStore, combineReducers, Dispatch, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n// import { Dispatch } from 'react';\nimport { postsReducer } from './postsReducer';\nimport { commentsReducer } from './commentsReducer';\n\nimport loadingReducer, { finishLoading, startLoading } from './loading';\nimport messageReducer, { setMessage } from './message';\nimport { fetchMessage } from '../helpers/api';\n// import { getPosts } from '../helpers/posts';\n// import { Post } from '../types';\n\n// Action types\nconst SET_LOADING = 'SET_LOADING';\n\n/**\n * Each concrete reducer will receive all the actions but only its part of the state\n *\n * const rootReducer = (state = {}, action) => ({\n *   loading: loadingReducer(state.loading, action),\n *   message: messageReducer(state.message, action),\n * })\n */\n\n// const initialState: RootState = {\n//   posts: [],\n//   postId: 0,\n//   users: [],\n//   userId: 0,\n//   user: {},\n//   loading: false,\n//   message: null,\n// };\n\n// const postsReducer = (state = initialState, action: AnyAction) => {\n\n// const postsReducer = (state = {}, action: AnyAction) => ({\n//   switch (action.type) {\n//     case GET_POSTS:\n//       return {\n//         ...state,\n//         todos: [...action.value],\n//       }\n//       default:\n//       return state;\n//   }\n// });\n\nconst rootReducer = combineReducers({\n  loading: loadingReducer,\n  message: messageReducer,\n  postsState: postsReducer,\n  commentsState: commentsReducer,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\n// Action creators\nexport const setLoading = (loading: boolean) => ({ type: SET_LOADING, value: loading });\n\n// Selectors - a function receiving Redux state and returning some data from it\nexport const isLoading = (state: RootState) => state.loading;\nexport const getMessage = (state: RootState) => state.message;\nexport const getUsersList = (state: RootState) => state.postsState.users;\nexport const getPostsList = (state: RootState) => state.postsState.posts;\nexport const getSelectedPostId = (state: RootState) => state.postsState.selectedPostId;\nexport const getPost = (state: RootState) => state.postsState.post;\nexport const getPostComments = (state: RootState) => state.commentsState.comments;\nexport const areCommentsUpdated = (state: RootState) => state.commentsState.commentsUpdated;\n\n/**\n * Thunk - is a function that should be used as a normal action creator\n *\n * dispatch(loadMessage())\n */\nexport const loadMessage = () => {\n  // inner function is an action handled by Redux Thunk\n  return async (dispatch: Dispatch<any>) => {\n    dispatch(startLoading());\n\n    try {\n      const message = await fetchMessage();\n\n      dispatch(setMessage(message));\n    } catch (error) {\n      dispatch(setMessage('Error occurred when loading data'));\n    }\n\n    dispatch(finishLoading());\n  };\n};\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk)),\n);\n\nexport default store;\n","import React, { useCallback } from 'react';\nimport { useLocation, useHistory } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getSelectedUserId, setSelectedUserId } from '../../store/postsReducer';\nimport { getUsersList } from '../../store'\n\nimport { User } from '../../types';\n\nexport const Filters = () => {\n  // const [query, setQuery] = useState('');\n  const location = useLocation();\n  const history = useHistory();\n  const searchParams = new URLSearchParams(location.search);\n\n  const userId = useSelector(getSelectedUserId);\n  const users: User[] = useSelector(getUsersList);\n\n  const dispatch = useDispatch();\n\n  // let newUserId = userId;\n  // console.log(newUserId);\n\n  var handleChange = useCallback((value: string) => {\n    // const { name, type, checked } = ev.target;\n    // let { value }: any = ev.target;\n    // newUserId = value;\n\n    if (Number(value) > 0) {\n      searchParams.set('userId', value);\n      dispatch(setSelectedUserId(Number(value)));\n    } else {\n      searchParams.delete('userId');\n    }\n    history.push({ search: searchParams.toString() });\n  }, [history, searchParams, dispatch]);\n\n  if (users) {\n    return (\n      <label>\n        Select a user: &nbsp;\n\n        <select\n          name=\"user\"\n          className=\"App__user-selector\"\n          value={userId}\n          onChange={(e) => {\n            handleChange(e.target.value);\n          }}\n        >\n          <option value=\"\">\n            Choose a user\n          </option>\n          {users.map((user: any) => (\n            <option value={user.id} key={user.id}>\n              {user.name}\n            </option>\n          ))}\n        </select>\n      </label>\n    )\n  } else {\n    return (\n      <div className=\"App__loading-message\">Loading data...</div>\n    )\n  }\n}\n","import React, { useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport './PostsList.scss';\n\nimport {\n  getPostsList,\n  getSelectedPostId,\n} from '../../store';\nimport { fetchPosts, setPostId } from '../../store/postsReducer';\n\nimport { Post } from '../../types';\nimport { setPostComments } from '../../store/commentsReducer';\n\n// interface PostsListProps {\n//   userid: number;\n// }\n\n// export const PostsList: React.FC<PostsListProps> = ({\n//   userid\n// }) => {\nexport const PostsList = () => {\n  // const [isLoading, setIsLoading] = useState(false);\n  const posts: Post[] = useSelector(getPostsList);\n  const postId = useSelector(getSelectedPostId);\n\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search);\n  const selectedUserId = Number(searchParams.get('userId')) || 0;\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (selectedUserId > 0) {\n      console.log('userId and selectedUserId in useEffect 1', selectedUserId);\n      dispatch(fetchPosts(selectedUserId));\n    } else {\n      console.log('userId and selectedUserId in useEffect 2', selectedUserId);\n      dispatch(fetchPosts());\n    }\n  }, [selectedUserId, dispatch]);\n\n  // useEffect(() => {\n  //   if (postId > 0) {\n  //     fetchPost(postId);\n  //   }\n  // }, [postId]);\n\n  // console.log(posts, typeof posts != \"undefined\" && posts != null && posts.length != null);\n  const isPostListEmpty = posts ? (posts.length ? false : true) : true;\n\n  return (\n    <div className=\"PostsList\">\n      {isPostListEmpty ? (\n        <p className=\"info\">Posts list is empty.</p>\n      ) : (\n        <>\n          <h2>Posts:</h2>\n          <ul className=\"PostsList__list\">\n            {posts.map((post: any) => (\n              <li className=\"PostsList__item\" key={post.id}>\n                <div>\n                  <b>\n                    [User\n                    {post.title}\n                    ]:\n                    {' '}\n                  </b>\n                  {post.body}\n                </div>\n                  {postId !== post.id ? (\n                  <button\n                    type=\"button\"\n                    className=\"PostsList__button button\"\n                    onClick={() => {\n                      dispatch(setPostId(post.id))\n                    }}\n                  >\n                    Open\n                  </button>\n                ) : (\n                  <button\n                    type=\"button\"\n                    className=\"PostsList__button button button--active\"\n                    onClick={() => {\n                      dispatch(setPostId(0));\n                      dispatch(setPostComments(null));\n                    }}\n                  >\n                    Close\n                  </button>\n                )}\n              </li>\n            ))}\n          </ul>\n        </>\n      )}\n    </div>\n  );\n};\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport deleteIcon from '../../images/delete.svg';\n// import { getPostDetails } from '../../helpers/posts';\n// import { getPostComments, removePostComment, addPostComment } from '../../api/comments';\n\nimport {\n  getPostComments,\n  areCommentsUpdated\n} from '../../store'; // isLoading\nimport {\n  fetchPostComments,\n  setCommentsUpdated,\n  removePostComment\n} from '../../store/commentsReducer'\n\nimport { Comment } from '../../types';\n\nexport type PropState = {\n  postId: number,\n};\n\nexport const Comments: React.FC<PropState> = React.memo(({ postId }) => {\n  // const [commentHidden, setCommentHidden] = useState(false);\n  const comments: Comment[] | null = useSelector(getPostComments);\n  const commentsUpdated: boolean = useSelector(areCommentsUpdated);\n\n  const dispatch = useDispatch();\n  // const loading = useSelector(isLoading);\n\n  useEffect(() => {\n    if (postId > 0) {\n      dispatch(fetchPostComments(postId));\n      console.log('Comments useeffect postId', postId, commentsUpdated);\n      // dispatch(setCommentsUpdated(false));\n    }\n\n    if (commentsUpdated) {\n      console.log('Comments commentsUpdated is true in useeffect', postId, commentsUpdated);\n      dispatch(setCommentsUpdated(false));\n    }\n  }, [postId, commentsUpdated, dispatch]);\n\n  const removeCommentHandler = async (commentId: number) => {\n    // setIsLoading(true);\n    await removePostComment(commentId);\n    // dispatch(fetchPost(postId));\n    dispatch(setCommentsUpdated(true));\n  };\n\n  // console.log(comments, 333);\n  // console.log('Comments commentsUpdated is ', commentsUpdated, postId);\n  // console.log(comments, (comments && comments.length));\n\n  // const removeCommentHandler = (commentId: number) => {\n    \n  //   dispatch(removePostComment(commentId));\n  // }\n  if (comments && comments.length) {\n    console.log(comments);\n    return (\n      <ul className=\"PostDetails__list\">\n        {comments.map(comment => (\n          <li className=\"PostDetails__list-item\" key={comment.id}>\n            <button\n              type=\"button\"\n              className=\"PostDetails__remove-button button\"\n              onClick={() => {\n                if (comment.id) {\n                  removeCommentHandler(comment.id);\n                }\n              }}\n            >\n              <img src={deleteIcon} alt=\"delete icon\"></img>\n            </button>\n            <p>{comment.body} <sub>{comment.id} post {postId}</sub></p>\n          </li>\n        ))}\n      </ul>\n    )\n  } else {\n    return (\n      <p className=\"info\">No comments</p>\n    );\n  }\n});\n","import React, { useState, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport './NewCommentForm.scss';\nimport { NewComment } from '../../types';\n\nimport {\n  addPostComment,\n  setCommentsUpdated\n} from '../../store/commentsReducer';\n\n\ninterface NewCommentFormProps {\n  postId: number;\n}\n\nexport const NewCommentForm: React.FC<NewCommentFormProps> = React.memo(({\n  postId,\n}) => {\n  const initialValues: NewComment = {\n    name: '',\n    email: '',\n    body: '',\n    postId: postId,\n  };\n\n  const [newComment, setNewComment] = useState(initialValues);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    setNewComment(initialValues);\n  }, [postId]);\n\n  const resetForm = () => {\n    setNewComment({\n      name: '',\n      email: '',\n      body: '',\n      postId: postId,\n    });\n  };\n\n  const validateForm = (newComment: NewComment) => {\n    let isFormValid = true;\n    if (!newComment.name.length) {\n      isFormValid = false;\n    }\n\n    return isFormValid;\n  };\n\n  const handleChangeInput = (e: any) => {\n    const { name, value } = e.target;\n\n    setNewComment(prev => ({\n      ...prev,\n      [name]: value,\n    }));\n  };\n\n  const submitForm = () => {\n    if (validateForm(newComment) === true) {\n      addCommentHandler(newComment);\n      setNewComment(initialValues);\n      resetForm();\n    } else {\n      console.log('Write message');\n    }\n  };\n\n  const addCommentHandler = async (comment: NewComment) => {\n    const date = Date.now().toString();\n    const newComment = {\n      ...comment,\n      id: Number(date.substr(date.length - 6)),\n    };\n\n    console.log('new comment is ', newComment);\n\n    await addPostComment(newComment);\n    dispatch(setCommentsUpdated(true));\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={(e) => {\n        e.preventDefault();\n        submitForm();\n      }}\n      method=\"POST\"\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={newComment.name}\n          onChange={handleChangeInput}\n        />\n        {/* {errors.name\n          && <p className=\"NewCommentForm__error\">{errors.name.message}</p>\n        } */}\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={newComment.email}\n          onChange={handleChangeInput}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comments here\"\n          className=\"NewCommentForm__input\"\n          value={newComment.body}\n          // {...register('body', {\n          //   required: 'Message text is required.',\n          //   minLength: {\n          //     value: 5,\n          //     message: 'Minimal length of message text is 5.',\n          //   },\n          //   pattern: {\n          //     value: /^$|.*\\S+.*/,\n          //     message: 'Message should\\'t be made up of whitespaces.',\n          //   },\n          // })}\n          onChange={handleChangeInput}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n});\n","import React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { Comments } from '../Comments';\nimport { NewCommentForm } from '../NewCommentForm';\n// import { getPostDetails } from '../../helpers/posts';\n// import { getPostComments, removePostComment, addPostComment } from '../../api/comments';\nimport './PostDetails.scss';\n\nimport {\n  getSelectedPostId,\n  getPost,\n  getPostComments\n} from '../../store'; // isLoading\nimport {\n  fetchPost,\n} from '../../store/postsReducer'\n\nimport { Post, Comment } from '../../types';\n\nexport const PostDetails = () => {\n  // const [post, setPost] = useState([]);\n  // const [comments, setComments] = useState(null);\n  const [commentHidden, setCommentHidden] = useState(false);\n  // const [isCommentsUpdated, setCommentsUpdated] = useState(false);\n  const postId = useSelector(getSelectedPostId);\n  const post: Post = useSelector(getPost);\n  const comments: Comment[] | null = useSelector(getPostComments);\n\n  const dispatch = useDispatch();\n  // const loading = useSelector(isLoading);\n\n  useEffect(() => {\n    if (postId > 0) {\n      dispatch(fetchPost(postId));\n    }\n  }, [postId, dispatch]);\n\n  const toggleDisplayComment = () => {\n    setCommentHidden(!commentHidden);\n  };\n\n  const postInfo:any = post || {};\n  const commentsLength = comments && comments.length;\n\n  return (\n    <section className=\"PostDetails\">\n      \n      {postId ? (\n        <>\n        <h2>{postInfo.title}</h2>\n\n        <div className=\"PostDetails__post\">\n          <p>{postInfo.body}</p>\n        </div>\n\n        <div className=\"PostDetails__comments\">\n          {!!commentsLength && (\n            <button\n              type=\"button\"\n              className=\"button\"\n              onClick={toggleDisplayComment}\n            >\n              {commentHidden ? 'Show ' : 'Hide '}\n              comments\n            </button>\n          )}\n\n          {!commentHidden && (\n            <Comments postId={postId} />\n          )}\n          <div className=\"PostDetails__form-wrapper\">\n            <NewCommentForm\n              postId={postId}\n            />\n          </div>\n        </div>\n        </>\n        ) : (\n        <p className=\"info\">No post details</p>\n      )}\n    </section>\n  );\n};\n","import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport './App.scss';\n\nimport { getUsers } from './helpers/users';\n\nimport { User } from './types';\nimport { isLoading, getMessage } from './store';\nimport { setUsersList } from './store/postsReducer';\n\nimport { Filters } from \"./components/Filters\";\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from \"./components/PostDetails\";\n\nconst App = () => {\n  const loading = useSelector(isLoading);\n  const message = useSelector(getMessage) || 'Ready!';\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    getUsers()\n      .then((result: User[]|any) => dispatch(setUsersList(result.data)));\n  }, [dispatch]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <Filters />\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList />\n        </div>\n        <div className=\"App__content\">\n          <PostDetails />\n        </div>\n      </main>\n\n      \n      {loading ?\n        <div className=\"alert\">'Loading...'</div>\n      :\n        <div className=\"alert alert--fade-out\">{message}</div>}\n    </div>\n  );\n};\n\nexport default App;\n","import { BASE_URL, request } from './api';\n// import { User } from '../types';\n\nexport function getUsers() {\n  console.log(`${BASE_URL}/users`);\n  return request('users')\n    // .then(users => users.filter((elem: User, i: number, self: User[]) => i === 0 || elem.name !== self[i - 1].name));\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport App from './App';\nimport store from './store';\n\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}