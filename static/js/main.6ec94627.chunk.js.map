{"version":3,"sources":["images/delete.svg","images/edit.svg","api/api.ts","api/posts.ts","api/comments.ts","store/loading.ts","store/postsReducer.ts","store/commentsReducer.ts","store/message.ts","store/index.ts","components/Filters/Filters.tsx","components/PostsList/PostsList.tsx","components/Comments/Comments.tsx","components/NewCommentForm/NewCommentForm.tsx","helpers/useForm.ts","components/PostDetails/PostDetails.tsx","App.tsx","api/users.ts","index.tsx"],"names":["module","exports","BASE_URL","request","url","options","fetch","then","res","ok","Error","status","statusText","json","getPostDetails","postId","getPostComments","reducer","loading","action","type","initialState","posts","post","selectedPostId","userId","users","setSelectedUserId","value","setPostId","fetchPosts","dispatch","getPosts","comments","commentsEdit","commentEdit","commentsHidden","commentsUpdated","setPostComments","setCommentEdit","setCommentsUpdated","addComment","comment","method","headers","body","JSON","stringify","addPostComment","editComment","commentId","editPostComment","removeComment","removePostComment","updatePostComments","newComment","map","id","message","rootReducer","combineReducers","loadingReducer","messageReducer","postsState","state","commentsState","isLoading","getMessage","getUsersList","getSelectedUserId","getPostsList","getSelectedPostId","getPost","getPostCommentsEdit","getPostCommentEdit","arePostCommentsHidden","arePostCommentsUpdated","store","createStore","composeWithDevTools","applyMiddleware","thunk","Filters","useState","queryTitle","setQueryTitle","location","useLocation","history","useHistory","searchParams","URLSearchParams","search","useSelector","useDispatch","applyQuery","useCallback","debounce","newQuery","length","set","delete","push","toString","handleSelect","event","currentTarget","Number","className","htmlFor","name","placeholder","onChange","ev","user","key","PostsList","filteredPosts","selectedUserId","get","useEffect","filter","title","includes","toLowerCase","onClick","Comments","React","memo","areCommentsUpdated","fetchPostComments","removeCommentHandler","a","editCommentHandler","getComment","preventDefault","src","editIcon","alt","deleteIcon","NewCommentForm","formData","email","resetForm","initialValues","data","setData","errors","setErrors","valid","handleSubmit","e","validations","newErrors","validation","required","pattern","RegExp","test","custom","isValid","onSubmit","handleChange","target","handleTextareaChange","useForm","newCommentFields","replace","addCommentHandler","date","Date","now","newId","substr","PostDetails","areCommentsHidden","Promise","all","commentsCount","reason","console","error","fetchPost","App","result","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6ec94627.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/delete.d4a3dcc3.svg\";","module.exports = __webpack_public_path__ + \"static/media/edit.a5ec2c5e.svg\";","export const BASE_URL = 'https://mate.academy/students-api/';\n\nexport const request = (url: string = '', options?: object) => {\n  return fetch(BASE_URL + url, options).then((res) => {\n    if (!res.ok) {\n      throw new Error(`${res.status}: ${res.statusText}`);\n    }\n\n    return res.json();\n  });\n};\n\nexport function fetchMessage(): Promise<string> {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve('Message from server');\n    }, 2000);\n  });\n}\n","import { request } from './api';\n\nexport function getPosts(userId? : number) {\n  if (userId) {\n    return request(`posts?userId=${userId}`);\n  }\n\n  return request('posts');\n}\n\nexport function getPostDetails(postId : number) {\n  return request(`posts/${postId}`);\n}\n","import { request } from './api';\nimport { Comment } from '../types';\n\nexport function getPostComments(postId: number): Promise<Comment[]> {\n  return request(`comments?postId=${postId}`);\n}\n\nexport function getComment(commentId: number): Promise<Comment> {\n  return request(`comments/${commentId}`);\n}\n\nexport function removePostComment(commentId: number) {\n  return request(`comments/${commentId}`, {\n    method: 'DELETE',\n  });\n}\n\nexport function editPostComment(commentId: number, comment: Comment) {\n  return request(`comments/${commentId}`, {\n    method: 'PATCH',\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify(comment),\n  });\n};\n\nexport function addPostComment(comment: Comment) {\n  return request('comments', {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify(comment),\n  });\n};\n","import { AnyAction } from 'redux';\n\n// Action types\nconst START_LOADING = 'START_LOADING';\nconst FINISH_LOADING = 'FINISH_LOADING';\n\n// Action creators\nexport const startLoading = () => ({ type: START_LOADING });\nexport const finishLoading = () => ({ type: FINISH_LOADING });\n\nconst reducer = (loading = false, action: AnyAction) => {\n  switch (action.type) {\n    case START_LOADING:\n      return true;\n\n    case FINISH_LOADING:\n      return false;\n\n    default:\n      return loading;\n  }\n};\n\nexport default reducer;\n","import { AnyAction, Dispatch } from 'redux';\n\nimport { Post, PostMain, User } from '../types';\nimport { getPosts, getPostDetails } from '../api/posts';\nimport { getPostComments } from '../api/comments';\nimport { finishLoading, startLoading } from './loading';\n\nexport type RootState = {\n  posts: any,\n  post: PostMain | null;\n  selectedPostId: number,\n  userId: number,\n  users: User[]\n}\n\nconst initialState: RootState = {\n  posts: [],\n  post: null,\n  selectedPostId: 0,\n  userId: 0,\n  users: [],\n}\n\nconst SET_USERID = 'SET_USERID';\nconst SET_USERS = 'SET_USERS';\nconst SET_POSTS = 'SET_POSTS';\nconst SET_POST = \"SET_POST\";\nconst SET_POSTID = 'SET_POSTID';\n\n// Action creators\nexport const setSelectedUserId = (userId: number) => ({ type: SET_USERID, value: userId });\nexport const setUsersList = (users: User[]) => ({ type: SET_USERS, value: users });\nexport const setPosts = (posts: Post[]) => ({ type: SET_POSTS, posts });\nexport const setPost = (post: PostMain) => ({ type: SET_POST, post });\nexport const setPostId = (selectedPostId: number) => ({ type: SET_POSTID, value: selectedPostId });\n\nexport const fetchPosts = (\n  userId?: number\n) => (dispatch: Dispatch) => {\n  dispatch(startLoading());\n  getPosts(userId).then((res: any) => {\n    dispatch(setPosts(res));\n    dispatch(finishLoading());\n  });\n};\n\nexport const fetchPost = (\n  postId: number,\n) => (dispatch: Dispatch) => {\n  dispatch(startLoading());\n  Promise.all([getPostDetails(postId), getPostComments(postId)]).then(res => {\n    dispatch(finishLoading());\n    dispatch(setPost({\n      ...res[0],\n      commentsCount: res[1].length\n    }));\n  }, reason => {\n    // We can also set message action for that (messageReducer)\n    console.error(`Failed to fetch details of post ${postId}.`, reason);\n  });\n};\n\nexport const postsReducer = (state = initialState, action: AnyAction) => {\n  switch (action.type) {\n    case SET_USERID:\n      return {\n        ...state,\n        userId: action.value\n      }\n\n    case SET_USERS:\n      return {\n        ...state,\n        users: action.value\n      }\n    \n    case SET_POSTS:\n      return {\n        ...state,\n        posts: action.posts\n      };\n    \n    case SET_POST:\n      return {\n        ...state,\n        post: action.post\n      };\n\n    case SET_POSTID:\n      return {\n        ...state,\n        selectedPostId: action.value\n      };\n\n    default:\n      return state;\n  }\n}\n","import { AnyAction, Dispatch } from 'redux';\n\nimport { Comment, CommentsEdit } from '../types';\nimport { getPostComments, addPostComment, removePostComment, editPostComment } from '../api/comments';\n\nexport interface RootStateComments {\n  comments: Comment[] | null;\n  commentsEdit: CommentsEdit;\n  commentEdit: Comment | null;\n  commentsHidden: boolean;\n  commentsUpdated: boolean;\n};\n\nconst initialState: RootStateComments = {\n  comments: null,\n  commentsEdit: [],\n  commentEdit: null,\n  commentsHidden: false,\n  commentsUpdated: false,\n};\n\nconst SET_POST_COMMENTS = 'SET_POST_COMMENTS';\nconst SET_NEW_COMMENT = 'SET_NEW_COMMENT';\nconst SET_COMMENTS_HIDDEN = 'SET_COMMENTS_HIDDEN';\nconst SET_COMMENTS_UPDATED = 'SET_COMMENTS_UPDATED';\nconst SET_COMMENTS_EDIT = 'SET_COMMENTS_EDIT';\nconst SET_COMMENT_EDIT = 'SET_COMMENT_EDIT';\n\n// Action creators\nexport const setPostComments = (comments: Comment[] | null) => ({ type: SET_POST_COMMENTS, comments });\nexport const setNewComment = (comment: Comment) => ({ type: SET_NEW_COMMENT, comment });\nexport const setCommentsEdit = (commentId: number) => ({ type: SET_COMMENTS_EDIT, commentId });\nexport const setCommentEdit = (commentEdit: Comment | null) => ({ type: SET_COMMENT_EDIT, commentEdit });\nexport const setCommentsHidden = (commentsHidden: boolean) => ({ type: SET_COMMENTS_HIDDEN, commentsHidden });\nexport const setCommentsUpdated = (commentsUpdated: boolean) => ({ type: SET_COMMENTS_UPDATED, commentsUpdated });\n\nexport const fetchPostComments = (postId: number) => (dispatch: Dispatch) => {\n  getPostComments(postId)\n    .then((res: Comment[] | null) => {\n      if (res) {\n        dispatch(setPostComments(res));\n      } else {\n        dispatch(setPostComments(null));\n      }\n    });\n};\n\nexport const addComment = (comment: Comment) => {\n  addPostComment(comment);\n};\n\nexport const editComment = (commentId: number, comment: Comment) => {\n  editPostComment(commentId, comment);\n};\n\nexport const removeComment = (commentId: number) => {\n  removePostComment(commentId);\n}\n\nconst updatePostComments= (comments: Comment[] | null, newComment: Comment) => {\n  if (!comments) {\n    return null;\n  }\n\n  return comments.map(comment => {\n    if (comment.id !== newComment.id) {\n      return newComment;\n    }\n\n    return {\n      ...comment\n    }\n  })\n}\n\nexport const commentsReducer = (state = initialState, action: AnyAction) => {\n  switch (action.type) {\n    case SET_POST_COMMENTS:\n      return {\n        ...state,\n        comments: action.comments\n      };\n\n    case SET_COMMENTS_EDIT:\n      return {\n        ...state,\n        commentsEdit: [\n          ...state.commentsEdit,\n          action.commentId\n        ]\n      }\n\n    case SET_COMMENT_EDIT:\n      return {\n        ...state,\n        commentEdit: action.commentEdit\n      };\n\n    case SET_NEW_COMMENT:\n      return {\n        ...state,\n        comments: updatePostComments(state.comments, action.comment),\n      };\n\n    case SET_COMMENTS_HIDDEN:\n      return {\n        ...state,\n        commentsHidden: action.commentsHidden\n      };\n\n    case SET_COMMENTS_UPDATED:\n      return {\n        ...state,\n        commentsUpdated: action.commentsUpdated\n      };\n\n    default:\n      return state;\n  }\n}\n","import { AnyAction } from 'redux';\n\n// Action types\nconst SET_MESSAGE = 'SET_MESSAGE';\n\n// Action creators\nexport const setMessage = (message: string) => ({ type: SET_MESSAGE, message });\n\n// message reducer receives only the `state.message` part, but not the entire Redux state\nconst reducer = (message = '', action: AnyAction) => {\n  switch (action.type) {\n    case SET_MESSAGE:\n      return action.message;\n\n    default:\n      return message;\n  }\n};\n\nexport default reducer;\n","import { createStore, combineReducers, Dispatch, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport { postsReducer } from './postsReducer';\nimport { commentsReducer } from './commentsReducer';\n\nimport loadingReducer, { finishLoading, startLoading } from './loading';\nimport messageReducer, { setMessage } from './message';\nimport { fetchMessage } from '../api/api';\n\n// Action types\nconst SET_LOADING = 'SET_LOADING';\n\nconst rootReducer = combineReducers({\n  loading: loadingReducer,\n  message: messageReducer,\n  postsState: postsReducer,\n  commentsState: commentsReducer,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\n// Action creators\nexport const setLoading = (loading: boolean) => ({ type: SET_LOADING, value: loading });\n\n// Selectors\nexport const isLoading = (state: RootState) => state.loading;\nexport const getMessage = (state: RootState) => state.message;\nexport const getUsersList = (state: RootState) => state.postsState.users;\nexport const getSelectedUserId = (state: RootState) => state.postsState.userId;\nexport const getPostId = (state: RootState) => state.postsState.selectedPostId;\nexport const getPostsList = (state: RootState) => state.postsState.posts;\nexport const getSelectedPostId = (state: RootState) => state.postsState.selectedPostId;\nexport const getPost = (state: RootState) => state.postsState.post;\nexport const getPostComments = (state: RootState) => state.commentsState.comments;\nexport const getPostCommentsEdit = (state: RootState) => state.commentsState.commentsEdit;\nexport const getPostCommentEdit = (state: RootState) => state.commentsState.commentEdit;\nexport const arePostCommentsHidden = (state: RootState) => state.commentsState.commentsHidden;\nexport const arePostCommentsUpdated = (state: RootState) => state.commentsState.commentsUpdated;\n\n/**\n * Thunk\n *\n * dispatch(loadMessage())\n */\nexport const loadMessage = () => {\n  // inner function is an action handled by Redux Thunk\n  return async (dispatch: Dispatch<any>) => {\n    dispatch(startLoading());\n\n    try {\n      const message = await fetchMessage();\n\n      dispatch(setMessage(message));\n    } catch (error) {\n      dispatch(setMessage('Error occurred when loading data'));\n    }\n\n    dispatch(finishLoading());\n  };\n};\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk)),\n);\n\nexport default store;\n","import React, { useState, useCallback } from 'react';\nimport { useLocation, useHistory } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { isLoading, getSelectedUserId, getUsersList } from '../../store';\nimport { setSelectedUserId } from '../../store/postsReducer';\n\nimport debounce from 'lodash/debounce.js';\n\nimport { User } from '../../types';\n\nexport const Filters: React.FC = () => {\n  const [queryTitle, setQueryTitle] = useState('');\n  const location = useLocation();\n  const history = useHistory();\n  const searchParams = new URLSearchParams(location.search);\n\n  const userId = useSelector(getSelectedUserId);\n  const users: User[] = useSelector(getUsersList);\n  const loading: boolean = useSelector(isLoading);\n\n  const dispatch = useDispatch();\n\n  const applyQuery = useCallback(\n    debounce((newQuery: string | null) => {\n      if (newQuery && newQuery.length > 0) {\n        searchParams.set('query', newQuery);\n      } else {\n        searchParams.delete('query');\n      }\n\n      history.push({ search: searchParams.toString() });\n    }, 350), [],\n  );\n\n  var handleChange = function(ev: React.ChangeEvent<HTMLInputElement>) {\n    const value = ev.currentTarget.value;\n    setQueryTitle(value);\n    applyQuery(value);\n  }\n\n  var handleSelect = useCallback((event: React.ChangeEvent<HTMLSelectElement>) => {\n    const value = event.currentTarget.value;\n\n    if (Number(value) > 0 && value.length > 0) {\n      searchParams.set('userId', value);\n      dispatch(setSelectedUserId(Number(value)));\n    } else {\n      searchParams.delete('userId');\n      dispatch(setSelectedUserId(0));\n    }\n    history.push({ search: searchParams.toString() });\n  }, [userId, dispatch]);\n\n  if (users) {\n    return (\n      <>\n        <div className=\"group group--left\">\n          <label htmlFor=\"title\">\n            Title: &nbsp;\n          </label>\n          <input\n            type=\"text\"\n            name=\"title\"\n            value={queryTitle}\n            placeholder=\"Filter by title\"\n            onChange={handleChange}\n          />\n        </div>\n\n        {loading ? (\n          <div className=\"info\">Loading users...</div>\n        ) : (\n          <div className=\"group group--left\">\n            <label htmlFor=\"user\">\n              Select a user: &nbsp;\n            </label>\n            <select\n              name=\"user\"\n              value={userId}\n              onChange={handleSelect}\n            >\n              <option value=\"\">\n                Choose a user\n              </option>\n              {users.map((user: any) => (\n                <option value={user.id} key={user.id}>\n                  {user.name}\n                </option>\n              ))}\n            </select>\n          </div>\n        )}\n      </>\n    )\n  } else {\n    return (\n      <div className=\"App__loading-message\">Loading data...</div>\n    )\n  }\n}\n","import React, { useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport './PostsList.scss';\n\nimport {\n  isLoading,\n  getPostsList,\n  getSelectedPostId,\n} from '../../store';\nimport { fetchPosts, setPostId } from '../../store/postsReducer';\n\nimport { Post } from '../../types';\nimport { setPostComments } from '../../store/commentsReducer';\n\nexport const PostsList: React.FC = () => {\n  const posts: Post[] = useSelector(getPostsList);\n  const postId: number = useSelector(getSelectedPostId);\n  const loading: boolean = useSelector(isLoading);\n\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search);\n  const selectedUserId = Number(searchParams.get('userId')) || 0;\n  const queryTitle = searchParams.get('query') || null;\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (selectedUserId > 0) {\n      dispatch(fetchPosts(selectedUserId));\n    } else {\n      dispatch(fetchPosts());\n    }\n  }, [selectedUserId, dispatch]);\n\n  let filteredPosts;\n  if (queryTitle) {\n    filteredPosts = posts.filter(post => post.title.includes(queryTitle.toLowerCase()));\n  } else {\n    filteredPosts = posts;\n  }\n\n  return (\n    <div className=\"PostsList\">\n      {loading ? (\n        <div className=\"loading\"></div>\n      ) : (\n        <>\n          <h2>Posts:</h2>\n          <ul className=\"PostsList__list\">\n            {filteredPosts.length > 0\n              ? filteredPosts.map((post: any) => (\n                <li className=\"PostsList__item\" key={post.id}>\n                  <div className=\"PostsList__item-content\">\n                    <h3>{post.title}</h3>\n                    <p>{post.body}</p>\n                  </div>\n                  {postId !== post.id ? (\n                    <button\n                      type=\"button\"\n                      className=\"PostsList__button button\"\n                      onClick={() => {\n                        dispatch(setPostId(post.id))\n                      }}\n                    >\n                      Open\n                    </button>\n                  ) : (\n                    <button\n                      type=\"button\"\n                      className=\"PostsList__button button button--active\"\n                      onClick={() => {\n                        dispatch(setPostId(0));\n                        dispatch(setPostComments(null));\n                      }}\n                    >\n                      Close\n                    </button>\n                  )}\n                </li>\n              )) : (\n                <p className=\"info\">Posts list is empty.</p>\n              )}\n          </ul>\n        </>\n      )}\n    </div>\n  );\n};\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport deleteIcon from '../../images/delete.svg';\nimport editIcon from '../../images/edit.svg';\n\nimport { getComment } from '../../api/comments';\n\nimport {\n  getPostComments,\n  getPostCommentsEdit,\n  arePostCommentsUpdated\n} from '../../store';\nimport {\n  fetchPostComments,\n  setCommentEdit,\n  setCommentsUpdated,\n  removeComment\n} from '../../store/commentsReducer'\n\nimport { Comment, CommentsEdit } from '../../types';\n\ntype Props = {\n  postId: number,\n};\n\nexport const Comments: React.FC<Props> = React.memo(({ postId }) => {\n  const comments: Comment[] | null = useSelector(getPostComments);\n  const areCommentsUpdated: boolean = useSelector(arePostCommentsUpdated);\n  const commentsEdit: CommentsEdit = useSelector(getPostCommentsEdit);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (postId > 0) {\n      dispatch(fetchPostComments(postId));\n    }\n\n    if (commentsEdit) {\n      dispatch(setCommentEdit(null));\n    }\n\n    if (areCommentsUpdated) {\n      dispatch(setCommentsUpdated(false));\n    }\n  }, [postId, areCommentsUpdated, dispatch]);\n\n  const removeCommentHandler = async (commentId: number) => {\n    await removeComment(commentId);\n    dispatch(setCommentsUpdated(true));\n  };\n\n  const editCommentHandler = (commentId: number) => {\n    getComment(commentId)\n      .then(res => {\n        dispatch(setCommentEdit(res));\n      });\n  };\n\n  if (comments) {\n    return (\n      <ul className=\"PostDetails__list\">\n        {comments.map(comment => (\n          <li className=\"PostDetails__list-item\" key={comment.id}>\n            <span>{comment.body} <sub>{comment.id} post {postId}</sub></span>\n            <div>\n              {commentsEdit.includes(comment.id) && (\n                <button\n                  type=\"button\"\n                  className=\"button button--icon\"\n                  onClick={(ev) => {\n                    ev.preventDefault();\n                    editCommentHandler(comment.id);\n                  }}\n                >\n                  <img src={editIcon} alt=\"edit icon\"></img>\n                </button>\n              )}\n              <button\n                type=\"button\"\n                className=\"button button--icon\"\n                onClick={(ev) => {\n                  ev.preventDefault();\n\n                  if (comment.id) {\n                    removeCommentHandler(comment.id);\n                  }\n                }}\n              >\n                <img src={deleteIcon} alt=\"delete icon\"></img>\n              </button>\n            </div>\n          </li>\n        ))}\n      </ul>\n    )\n  } else {\n    return (\n      <p className=\"info\">No comments</p>\n    );\n  }\n});\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport './NewCommentForm.scss';\nimport { NewComment, CommentFields } from '../../types';\n\nimport { useForm } from '../../helpers/useForm';\n\nimport { getPostCommentEdit } from '../../store/index';\nimport { addComment, setCommentsEdit, editComment, setCommentsUpdated } from '../../store/commentsReducer';\n\ninterface NewCommentFormProps {\n  postId: number;\n}\n\nexport const NewCommentForm: React.FC<Pick<NewCommentFormProps, 'postId'>> = React.memo(({\n  postId,\n}) => {\n  const commentEdit = useSelector(getPostCommentEdit);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (commentEdit) {\n      formData.name = commentEdit.name;\n      formData.email = commentEdit.email;\n      formData.body = commentEdit.body;\n    } else {\n      resetForm();\n    }\n  }, [postId, commentEdit]);\n\n  const {\n    handleSubmit,\n    handleChange,\n    handleTextareaChange,\n    data: formData,\n    errors\n  } = useForm<CommentFields>({\n    validations: {\n      name: {\n        pattern: {\n          value: '^[A-Za-z]*$',\n          message:\n            'You\\'re not allowed to use special characters or numbers in your name.',\n        },\n      },\n      email: {\n        pattern: {\n          value: '^[a-zA-Z0-9]+@[a-zA-Z0-9]+\\.[A-Za-z]+$',\n          message: 'Your email is not valid.',\n        },\n      },\n      body: {\n        custom: {\n          isValid: (value: string) => value.length < 151 && value.length > 3,\n          message: 'The comment should have from 4 to 150 characters.',\n        }\n      },\n    },\n    onSubmit: () => {\n      const newCommentFields = {\n        ...initialValues,\n        name: formData.name,\n        email: formData.email,\n        body: formData.body.replace(/^\\s+|\\s+$/g, ''),\n      }\n\n      if (commentEdit) {\n        editCommentHandler(newCommentFields);\n      } else {\n        addCommentHandler(newCommentFields);\n      }\n\n      resetForm();\n    },\n  });\n\n  const initialValues: NewComment = {\n    name: '',\n    email: '',\n    body: '',\n    postId: postId,\n  };\n\n  const resetForm = () => {\n    formData.name = '';\n    formData.email = '';\n    formData.body = '';\n  };\n\n  const editCommentHandler = async (comment: NewComment) => {\n    const newComment = {\n      ...comment,\n      id: commentEdit.id,\n    };\n\n    await editComment(commentEdit.id, newComment);\n    dispatch(setCommentsUpdated(true));\n  };\n\n  const addCommentHandler = async (comment: NewComment) => {\n    const date = Date.now().toString();\n    const newId = Number(date.substr(date.length - 6));\n    const newComment = {\n      ...comment,\n      id: newId,\n    };\n\n    await addComment(newComment);\n    dispatch(setCommentsUpdated(true));\n    dispatch(setCommentsEdit(newId));\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={(ev) => {\n        ev.preventDefault();\n        handleSubmit(ev);\n      }}\n      method=\"POST\"\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={formData.name || ''}\n          onChange={handleChange('name')}\n          required\n        />\n        {errors.name && <p className=\"NewCommentForm__error\">{errors.name}</p>}\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"email\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={formData.email || ''}\n          onChange={handleChange('email')}\n        />\n        {errors.email && <p className=\"NewCommentForm__error\">{errors.email}</p>}\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comments here\"\n          className=\"NewCommentForm__input\"\n          value={formData.body || ''}\n          required\n          onChange={(ev) => {\n            handleTextareaChange('body', ev.target.value);\n          }}\n        />\n        {errors.body && <p className=\"NewCommentForm__error\">{errors.body}</p>}\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n});\n","import { ChangeEvent, FormEvent, useState } from 'react';\n\ninterface Validation {\n  required?: {\n    value: boolean;\n    message: string;\n  };\n  pattern?: {\n    value: string;\n    message: string;\n  };\n  custom?: {\n    isValid: (value: string) => boolean;\n    message: string;\n  };\n}\n\ntype ErrorRecord<T> = Partial<Record<keyof T, string>>;\n\ntype Validations<T extends {}> = Partial<Record<keyof T, Validation>>;\n\nexport const useForm = <T extends Record<keyof T, any> = {}>(options?: {\n  validations?: Validations<T>;\n  initialValues?: Partial<T>;\n  onSubmit?: () => void;\n}) => {\n  const [data, setData] = useState<T>((options?.initialValues || {}) as T);\n  const [errors, setErrors] = useState<ErrorRecord<T>>({});\n  let valid = true;\n\n  // Needs to extend unknown so we can add a generic to an arrow function\n  const handleChange = (key: keyof T) => (e: ChangeEvent<HTMLInputElement>) => {\n    let value = e.target.value;\n    setData({\n      ...data,\n      [key]: value,\n    });\n  };\n\n  const handleTextareaChange = (key: keyof T, value: string) => {\n    setData({\n      ...data,\n      [key]: value,\n    });\n  };\n\n  const handleSubmit = async (e: FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const validations = options?.validations;\n    if (validations) {\n      const newErrors: ErrorRecord<T> = {};\n      for (const key in validations) {\n        const value = data[key];\n        const validation = validations[key];\n        if (validation?.required?.value && !value) {\n          valid = false;\n          newErrors[key] = validation?.required?.message;\n        }\n\n        const pattern = validation?.pattern;\n        if (pattern?.value && !RegExp(pattern.value).test(value)) {\n          valid = false;\n          newErrors[key] = pattern.message;\n        }\n\n        const custom = validation?.custom;\n        if (custom?.isValid && !custom.isValid(value)) {\n          valid = false;\n          newErrors[key] = custom.message;\n        }\n      }\n\n      if (!valid) {\n        setErrors(newErrors);\n        return;\n      }\n    }\n\n    setErrors({});\n\n    if (options?.onSubmit) {\n      options.onSubmit();\n    }\n  };\n\n  return {\n    valid,\n    data,\n    handleChange,\n    handleTextareaChange,\n    handleSubmit,\n    errors,\n  };\n};\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { Comments } from '../Comments';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\n\nimport { isLoading, getSelectedPostId, getPost, arePostCommentsHidden } from '../../store';\nimport { fetchPost } from '../../store/postsReducer';\nimport { setCommentsHidden } from '../../store/commentsReducer';\n\nimport { Post } from '../../types';\n\nexport const PostDetails: React.FC = () => {\n  const postId = useSelector(getSelectedPostId);\n  const post: Post | null = useSelector(getPost);\n  const areCommentsHidden: boolean = useSelector(arePostCommentsHidden);\n  const loading = useSelector(isLoading);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (postId > 0) {\n      dispatch(fetchPost(postId));\n    }\n  }, [postId, dispatch]);\n\n  const toggleDisplayComment = (ev: React.MouseEvent<HTMLButtonElement>) => {\n    ev.preventDefault();\n\n    dispatch(setCommentsHidden(!areCommentsHidden));\n  };\n\n  return (\n    <div className=\"PostDetails\">\n      {loading ? (\n        <div className=\"loading\"></div>\n      ) :\n      postId > 0 && post ? (\n        <article className=\"PostDetails__post\">\n          <h2>{post.title}</h2>\n          <p>{post.body}</p>\n  \n          <div className=\"PostDetails__post-comments\">\n            {post.commentsCount > 0 &&\n              <button\n                type=\"button\"\n                className=\"button\"\n                onClick={toggleDisplayComment}\n              >\n                {areCommentsHidden ? 'Show ' : 'Hide '}\n                comments\n              </button>\n            }\n  \n            {!areCommentsHidden && (\n              <Comments postId={postId} />\n            )}\n            <div className=\"PostDetails__form-wrapper\">\n              <NewCommentForm\n                postId={postId}\n              />\n            </div>\n          </div>\n        </article>\n        ) : (\n          <p className=\"info\">No post details</p>\n        )\n      }\n    </div>\n  );\n};\n","import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport './App.scss';\n\nimport { getUsers } from './api/users';\n\nimport { User } from './types';\nimport { isLoading, getMessage } from './store';\nimport { startLoading, finishLoading } from './store/loading';\nimport { setUsersList } from './store/postsReducer';\n\nimport { Filters } from \"./components/Filters\";\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from \"./components/PostDetails\";\n\nconst App: React.FC = () => {\n  const loading = useSelector(isLoading);\n  const message = useSelector(getMessage) || 'Ready!';\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(startLoading());\n    getUsers()\n      .then((result: User[]|any) => {\n        dispatch(setUsersList(result));\n        dispatch(finishLoading());\n      });\n  }, [dispatch]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <Filters />\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList />\n        </div>\n        <div className=\"App__content\">\n          <PostDetails />\n        </div>\n      </main>\n\n      \n      {loading ?\n        <div className=\"alert\">'Loading...'</div>\n      :\n        <div className=\"alert alert--fade-out\">{message}</div>}\n    </div>\n  );\n};\n\nexport default App;\n","import { request } from './api';\n\nexport function getUsers() {\n  return request('users');\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport App from './App';\nimport store from './store';\n\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}