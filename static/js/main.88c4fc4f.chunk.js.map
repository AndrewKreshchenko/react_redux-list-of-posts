{"version":3,"sources":["images/delete.svg","images/edit.svg","api/api.ts","api/posts.ts","api/comments.ts","store/loading.ts","store/message.ts","store/postsReducer.ts","store/commentsReducer.ts","store/index.ts","components/Filters/Filters.tsx","components/PostItem/PostItem.tsx","components/PostsList/PostsList.tsx","components/Comments/Comments.tsx","components/NewCommentForm/NewCommentForm.tsx","helpers/useForm.ts","components/PostDetails/PostDetails.tsx","App.tsx","api/users.ts","index.tsx"],"names":["module","exports","BASE_URL","request","url","options","fetch","then","res","ok","Error","status","statusText","json","getPostDetails","postId","getPostComments","reducer","loading","action","type","setMessage","message","initialState","posts","post","selectedPostId","userId","users","setSelectedUserId","value","setPostId","fetchPosts","dispatch","getPosts","catch","err","finally","comments","commentsEdit","commentEdit","commentsHidden","commentsUpdated","setPostComments","setCommentEdit","setCommentsUpdated","addComment","comment","method","headers","body","JSON","stringify","addPostComment","updateComment","commentId","updatePostComment","removeComment","removePostComment","updatePostComments","newComment","map","id","rootReducer","combineReducers","loadingReducer","messageReducer","postsState","state","commentsState","isLoading","getMessage","getUsersList","getSelectedUserId","getPostsList","getSelectedPostId","getPost","getPostCommentsEdit","getPostCommentEdit","arePostCommentsHidden","arePostCommentsUpdated","store","createStore","composeWithDevTools","applyMiddleware","thunk","Filters","useState","queryTitle","setQueryTitle","location","useLocation","history","useHistory","searchParams","URLSearchParams","search","useSelector","useDispatch","applyQuery","debounce","newQuery","length","set","delete","push","toString","className","htmlFor","name","placeholder","onChange","ev","currentTarget","event","Number","user","key","PostItem","React","memo","title","onClick","PostsList","selectedUserId","get","useEffect","filteredPosts","useMemo","filter","includes","toLowerCase","Comments","areCommentsUpdated","fetchPostComments","removeCommentHandler","a","editCommentHandler","getComment","preventDefault","src","editIcon","alt","deleteIcon","NewCommentForm","initialValues","email","formData","resetForm","resetData","data","setData","errors","setErrors","valid","handleSubmit","e","validations","newErrors","validation","required","pattern","RegExp","test","custom","isValid","onSubmit","handleChange","target","handleTextareaChange","Object","keys","forEach","isEditing","editing","useForm","newCommentFields","replace","updateCommentHandler","addCommentHandler","date","Date","now","newId","substr","PostDetails","areCommentsHidden","Promise","all","commentsCount","reason","console","error","fetchPost","App","result","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.88c4fc4f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/delete.d4a3dcc3.svg\";","module.exports = __webpack_public_path__ + \"static/media/edit.a5ec2c5e.svg\";","export const BASE_URL = 'https://mate.academy/students-api/';\n\nexport const request = (url: string = '', options?: object) => {\n  return fetch(BASE_URL + url, options).then((res) => {\n    if (!res.ok) {\n      throw new Error(`${res.status}: ${res.statusText}`);\n    }\n\n    return res.json();\n  });\n};\n\nexport function fetchMessage(): Promise<string> {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve('Message from server');\n    }, 2000);\n  });\n}\n","import { request } from './api';\n\nexport function getPosts(userId? : number) {\n  if (userId) {\n    return request(`posts?userId=${userId}`);\n  }\n\n  return request('posts');\n}\n\nexport function getPostDetails(postId : number) {\n  return request(`posts/${postId}`);\n}\n","import { request } from './api';\nimport { Comment } from '../types';\n\nexport function getPostComments(postId: number): Promise<Comment[]> {\n  return request(`comments?postId=${postId}`);\n}\n\nexport function getComment(commentId: number): Promise<Comment> {\n  return request(`comments/${commentId}`);\n}\n\nexport function removePostComment(commentId: number) {\n  return request(`comments/${commentId}`, {\n    method: 'DELETE',\n  });\n}\n\nexport function updatePostComment(commentId: number, comment: Comment) {\n  return request(`comments/${commentId}`, {\n    method: 'PATCH',\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify(comment),\n  });\n};\n\nexport function addPostComment(comment: Comment) {\n  return request('comments', {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify(comment),\n  });\n};\n","import { AnyAction } from 'redux';\n\n// Action types\nconst START_LOADING = 'START_LOADING';\nconst FINISH_LOADING = 'FINISH_LOADING';\n\n// Action creators\nexport const startLoading = () => ({ type: START_LOADING });\nexport const finishLoading = () => ({ type: FINISH_LOADING });\n\nconst reducer = (loading = false, action: AnyAction) => {\n  switch (action.type) {\n    case START_LOADING:\n      return true;\n\n    case FINISH_LOADING:\n      return false;\n\n    default:\n      return loading;\n  }\n};\n\nexport default reducer;\n","import { AnyAction } from 'redux';\n\n// Action types\nconst SET_MESSAGE = 'SET_MESSAGE';\n\n// Action creators\nexport const setMessage = (message: string) => ({ type: SET_MESSAGE, message });\n\n// message reducer receives only the `state.message` part, but not the entire Redux state\nconst reducer = (message = '', action: AnyAction) => {\n  switch (action.type) {\n    case SET_MESSAGE:\n      if (typeof action.message === 'object') {\n        return action.message.message;\n      }\n      return action.message;\n\n    default:\n      return message;\n  }\n};\n\nexport default reducer;\n","import { AnyAction, Dispatch } from 'redux';\n\nimport { Post, PostMain, User } from '../types';\nimport { getPosts, getPostDetails } from '../api/posts';\nimport { getPostComments } from '../api/comments';\nimport { finishLoading, startLoading } from './loading';\nimport { setMessage } from './message';\n\nexport type RootState = {\n  posts: any,\n  post: PostMain | null;\n  selectedPostId: number,\n  userId: number,\n  users: User[]\n}\n\nconst initialState: RootState = {\n  posts: [],\n  post: null,\n  selectedPostId: 0,\n  userId: 0,\n  users: [],\n}\n\nconst SET_USERID = 'SET_USERID';\nconst SET_USERS = 'SET_USERS';\nconst SET_POSTS = 'SET_POSTS';\nconst SET_POST = \"SET_POST\";\nconst SET_POSTID = 'SET_POSTID';\n\n// Action creators\nexport const setSelectedUserId = (userId: number) => ({ type: SET_USERID, value: userId });\nexport const setUsersList = (users: User[]) => ({ type: SET_USERS, value: users });\nexport const setPosts = (posts: Post[]) => ({ type: SET_POSTS, posts });\nexport const setPost = (post: PostMain) => ({ type: SET_POST, post });\nexport const setPostId = (selectedPostId: number) => ({ type: SET_POSTID, value: selectedPostId });\n\nexport const fetchPosts = (\n  userId?: number\n) => (dispatch: Dispatch) => {\n  dispatch(startLoading());\n  getPosts(userId).then((res: any) => {\n    dispatch(setPosts(res));\n  })\n  .catch(err => {\n    dispatch(setMessage(err));\n  })\n  .finally(() => {\n    dispatch(finishLoading());\n  });\n};\n\nexport const fetchPost = (\n  postId: number,\n) => (dispatch: Dispatch) => {\n  Promise.all([getPostDetails(postId), getPostComments(postId)]).then(res => {\n    dispatch(setPost({\n      ...res[0],\n      commentsCount: res[1].length\n    }));\n  }, reason => {\n    // We can also set message action for that (messageReducer)\n    console.error(`Failed to fetch details of post ${postId}.`, reason);\n  });\n};\n\nexport const postsReducer = (state = initialState, action: AnyAction) => {\n  switch (action.type) {\n    case SET_USERID:\n      return {\n        ...state,\n        userId: action.value\n      }\n\n    case SET_USERS:\n      return {\n        ...state,\n        users: action.value\n      }\n    \n    case SET_POSTS:\n      return {\n        ...state,\n        posts: action.posts\n      };\n    \n    case SET_POST:\n      return {\n        ...state,\n        post: action.post\n      };\n\n    case SET_POSTID:\n      return {\n        ...state,\n        selectedPostId: action.value\n      };\n\n    default:\n      return state;\n  }\n}\n","import { AnyAction, Dispatch } from 'redux';\n\nimport { Comment, CommentsEdit } from '../types';\nimport { getPostComments, addPostComment, removePostComment, updatePostComment } from '../api/comments';\n\nexport interface RootStateComments {\n  comments: Comment[] | null;\n  commentsEdit: CommentsEdit;\n  commentEdit: Comment | null;\n  commentsHidden: boolean;\n  commentsUpdated: boolean;\n};\n\nconst initialState: RootStateComments = {\n  comments: null,\n  commentsEdit: [],\n  commentEdit: null,\n  commentsHidden: false,\n  commentsUpdated: false,\n};\n\nconst SET_POST_COMMENTS = 'SET_POST_COMMENTS';\nconst SET_NEW_COMMENT = 'SET_NEW_COMMENT';\nconst SET_COMMENTS_HIDDEN = 'SET_COMMENTS_HIDDEN';\nconst SET_COMMENTS_UPDATED = 'SET_COMMENTS_UPDATED';\nconst SET_COMMENTS_EDIT = 'SET_COMMENTS_EDIT';\nconst SET_COMMENT_EDIT = 'SET_COMMENT_EDIT';\n\n// Action creators\nexport const setPostComments = (comments: Comment[] | null) => ({ type: SET_POST_COMMENTS, comments });\nexport const setNewComment = (comment: Comment) => ({ type: SET_NEW_COMMENT, comment });\nexport const setCommentsEdit = (commentId: number) => ({ type: SET_COMMENTS_EDIT, commentId });\nexport const setCommentEdit = (commentEdit: Comment | null) => ({ type: SET_COMMENT_EDIT, commentEdit });\nexport const setCommentsHidden = (commentsHidden: boolean) => ({ type: SET_COMMENTS_HIDDEN, commentsHidden });\nexport const setCommentsUpdated = (commentsUpdated: boolean) => ({ type: SET_COMMENTS_UPDATED, commentsUpdated });\n\nexport const fetchPostComments = (postId: number) => (dispatch: Dispatch) => {\n  getPostComments(postId)\n    .then((res: Comment[] | null) => {\n      if (res) {\n        dispatch(setPostComments(res));\n      } else {\n        dispatch(setPostComments(null));\n      }\n    });\n};\n\nexport const addComment = (comment: Comment) => {\n  addPostComment(comment);\n};\n\nexport const updateComment = (commentId: number, comment: Comment) => {\n  updatePostComment(commentId, comment);\n};\n\nexport const removeComment = (commentId: number) => {\n  removePostComment(commentId);\n}\n\nconst updatePostComments= (comments: Comment[] | null, newComment: Comment) => {\n  if (!comments) {\n    return null;\n  }\n\n  return comments.map(comment => {\n    if (comment.id !== newComment.id) {\n      return newComment;\n    }\n\n    return {\n      ...comment\n    }\n  })\n}\n\nexport const commentsReducer = (state = initialState, action: AnyAction) => {\n  switch (action.type) {\n    case SET_POST_COMMENTS:\n      return {\n        ...state,\n        comments: action.comments\n      };\n\n    case SET_COMMENTS_EDIT:\n      return {\n        ...state,\n        commentsEdit: [\n          ...state.commentsEdit,\n          action.commentId\n        ]\n      }\n\n    case SET_COMMENT_EDIT:\n      return {\n        ...state,\n        commentEdit: action.commentEdit\n      };\n\n    case SET_NEW_COMMENT:\n      return {\n        ...state,\n        comments: updatePostComments(state.comments, action.comment),\n      };\n\n    case SET_COMMENTS_HIDDEN:\n      return {\n        ...state,\n        commentsHidden: action.commentsHidden\n      };\n\n    case SET_COMMENTS_UPDATED:\n      return {\n        ...state,\n        commentsUpdated: action.commentsUpdated\n      };\n\n    default:\n      return state;\n  }\n}\n","import { createStore, combineReducers, Dispatch, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport { postsReducer } from './postsReducer';\nimport { commentsReducer } from './commentsReducer';\n\nimport loadingReducer from './loading';\nimport messageReducer, { setMessage } from './message';\nimport { fetchMessage } from '../api/api';\n\n// Action types\nconst SET_LOADING = 'SET_LOADING';\n\nconst rootReducer = combineReducers({\n  loading: loadingReducer,\n  message: messageReducer,\n  postsState: postsReducer,\n  commentsState: commentsReducer,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\n// Action creators\nexport const setLoading = (loading: boolean) => ({ type: SET_LOADING, value: loading });\n\n// Selectors\nexport const isLoading = (state: RootState) => state.loading;\nexport const getMessage = (state: RootState) => state.message;\nexport const getUsersList = (state: RootState) => state.postsState.users;\nexport const getSelectedUserId = (state: RootState) => state.postsState.userId;\nexport const getPostId = (state: RootState) => state.postsState.selectedPostId;\nexport const getPostsList = (state: RootState) => state.postsState.posts;\nexport const getSelectedPostId = (state: RootState) => state.postsState.selectedPostId;\nexport const getPost = (state: RootState) => state.postsState.post;\nexport const getPostComments = (state: RootState) => state.commentsState.comments;\nexport const getPostCommentsEdit = (state: RootState) => state.commentsState.commentsEdit;\nexport const getPostCommentEdit = (state: RootState) => state.commentsState.commentEdit;\nexport const arePostCommentsHidden = (state: RootState) => state.commentsState.commentsHidden;\nexport const arePostCommentsUpdated = (state: RootState) => state.commentsState.commentsUpdated;\n\n/**\n * Thunk\n *\n * dispatch(loadMessage())\n */\nexport const loadMessage = () => {\n  // inner function is an action handled by Redux Thunk\n  return async (dispatch: Dispatch<any>) => {\n    // dispatch(startLoading());\n\n    try {\n      const message = await fetchMessage();\n\n      dispatch(setMessage(message));\n    } catch (error) {\n      dispatch(setMessage('Error occurred when loading data'));\n    }\n\n    // dispatch(finishLoading());\n  };\n};\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk)),\n);\n\nexport default store;\n","import React, { useState } from 'react';\nimport { useLocation, useHistory } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { getSelectedUserId, getUsersList } from '../../store';\nimport { setSelectedUserId } from '../../store/postsReducer';\n\nimport debounce from 'lodash/debounce.js';\n\nimport { User } from '../../types';\n\nexport const Filters: React.FC = () => {\n  const [queryTitle, setQueryTitle] = useState('');\n  const location = useLocation();\n  const history = useHistory();\n  const searchParams = new URLSearchParams(location.search);\n\n  const userId = useSelector(getSelectedUserId);\n  const users: User[] = useSelector(getUsersList);\n  // const loading: boolean = useSelector(isLoading);\n\n  // andy@gmail.com\n\n  const dispatch = useDispatch();\n\n  const applyQuery = debounce((newQuery: string | null) => {\n    if (newQuery && newQuery.length > 0) {\n      searchParams.set('query', newQuery);\n    } else {\n      searchParams.delete('query');\n    }\n\n    history.push({ search: searchParams.toString() });\n  }, 350);\n\n  var handleChange = function(ev: React.ChangeEvent<HTMLInputElement>) {\n    const value = ev.currentTarget.value;\n    setQueryTitle(value);\n    applyQuery(value);\n  }\n\n  var handleSelect = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const value = event.currentTarget.value;\n\n    if (Number(value) > 0) {\n      searchParams.set('userId', value);\n      dispatch(setSelectedUserId(Number(value)));\n    } else {\n      searchParams.delete('userId');\n      dispatch(setSelectedUserId(0));\n    }\n    history.push({ search: searchParams.toString() });\n  };\n\n  if (users) {\n    return (\n      <>\n        <div className=\"group group--left\">\n          <label htmlFor=\"title\">\n            Title: &nbsp;\n          </label>\n          <input\n            type=\"text\"\n            name=\"title\"\n            value={queryTitle}\n            placeholder=\"Filter by title\"\n            onChange={handleChange}\n          />\n        </div>\n\n        {/* {loading ? (\n          <div className=\"info\">Loading users...</div>\n        ) : ( */}\n          <div className=\"group group--left\">\n            <label htmlFor=\"user\">\n              Select a user: &nbsp;\n            </label>\n            <select\n              name=\"user\"\n              value={userId}\n              onChange={handleSelect}\n            >\n              <option value=\"\">\n                All users\n              </option>\n              {users.map((user: any) => (\n                <option value={user.id} key={user.id}>\n                  {user.name}\n                </option>\n              ))}\n            </select>\n          </div>\n        {/* )} */}\n      </>\n    )\n  } else {\n    return (\n      <div className=\"info\">No users data</div>\n    )\n  }\n}\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { getSelectedPostId } from '../../store';\nimport { setPostId } from '../../store/postsReducer';\n\nimport { setPostComments } from '../../store/commentsReducer';\n\ntype Props = {\n  id: number,\n  title: string,\n  body: string,\n};\n\nexport const PostItem: React.FC<Props> = React.memo(({ id, title, body }) => {\n  const selectedPostId: number = useSelector(getSelectedPostId);\n\n  const dispatch = useDispatch();\n\n  return (\n    <>\n      <div className=\"PostsList__item-content\">\n        <h3>{title}</h3>\n        <p>{body}</p>\n      </div>\n\n      {selectedPostId !== id ? (\n        <button\n          type=\"button\"\n          className=\"PostsList__button button\"\n          onClick={() => {\n            dispatch(setPostId(id));\n          }}\n        >\n          Open\n        </button>\n      ) : (\n        <button\n          type=\"button\"\n          className=\"PostsList__button button button--active\"\n          onClick={() => {\n            dispatch(setPostId(0));\n            dispatch(setPostComments(null));\n          }}\n        >\n          Close\n        </button>\n      )}\n    </>\n  );\n});\n","import React, { useEffect, useMemo } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport './PostsList.scss';\n\nimport { getPostsList, getMessage } from '../../store';\nimport { fetchPosts } from '../../store/postsReducer';\n\nimport { Post } from '../../types';\n\nimport { PostItem } from \"../PostItem\";\n\ntype Props = {\n  loading: boolean,\n  selectedUserId: number,\n};\n\nexport const PostsList: React.FC<Props> = React.memo(({ loading, selectedUserId }) => {\n  const posts: Post[] = useSelector(getPostsList);\n  const message = useSelector(getMessage);\n\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search);\n  \n  const queryTitle = searchParams.get('query') || null;\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (selectedUserId > 0) {\n      dispatch(fetchPosts(selectedUserId));\n    } else {\n      dispatch(fetchPosts());\n    }\n  }, [selectedUserId, dispatch]);\n\n  const filteredPosts = useMemo(() => {\n    if (queryTitle) {\n      return posts.filter(post => post.title.includes(queryTitle.toLowerCase()));\n    } else {\n      return posts;\n    }\n  }, [posts, queryTitle]);\n\n  return (\n    <div className=\"PostsList\">\n      {loading && !message ? (\n        <div className=\"loading\"></div>\n      ) : (\n        <>\n          <h2>Posts:</h2>\n          <ul className=\"PostsList__list\">\n            {filteredPosts.length > 0\n              ? filteredPosts.map((post: any) => {\n                return (\n                  <li className=\"PostsList__item\" key={post.id}>\n                    <PostItem {...post} />\n                  </li>\n                )\n              }) : (\n                <p className=\"info\">Posts list is empty.</p>\n              )}\n          </ul>\n        </>\n      )}\n    </div>\n  );\n});\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport deleteIcon from '../../images/delete.svg';\nimport editIcon from '../../images/edit.svg';\n\nimport { getComment } from '../../api/comments';\n\nimport {\n  getPostComments,\n  getPostCommentsEdit,\n  arePostCommentsUpdated\n} from '../../store';\nimport {\n  fetchPostComments,\n  setCommentEdit,\n  setCommentsUpdated,\n  removeComment\n} from '../../store/commentsReducer'\n\nimport { Comment, CommentsEdit } from '../../types';\n\ntype Props = {\n  postId: number,\n};\n\nexport const Comments: React.FC<Props> = React.memo(({ postId }) => {\n  const comments: Comment[] | null = useSelector(getPostComments);\n  const areCommentsUpdated: boolean = useSelector(arePostCommentsUpdated);\n  const commentsEdit: CommentsEdit = useSelector(getPostCommentsEdit);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (postId > 0) {\n      dispatch(fetchPostComments(postId));\n    }\n\n    if (commentsEdit) {\n      dispatch(setCommentEdit(null));\n    }\n\n    if (areCommentsUpdated) {\n      dispatch(setCommentsUpdated(false));\n    }\n  }, [postId, areCommentsUpdated, dispatch]);\n\n  const removeCommentHandler = async (commentId: number) => {\n    await removeComment(commentId);\n    dispatch(setCommentsUpdated(true));\n  };\n\n  const editCommentHandler = (commentId: number) => {\n    getComment(commentId)\n      .then(res => {\n        dispatch(setCommentEdit(res));\n      });\n  };\n\n  if (comments) {\n    return (\n      <ul className=\"PostDetails__list\">\n        {comments.map(comment => (\n          <li className=\"PostDetails__list-item\" key={comment.id}>\n            <span>{comment.body}</span>\n            <div>\n              {commentsEdit.includes(comment.id) && (\n                <button\n                  type=\"button\"\n                  className=\"button button--icon\"\n                  onClick={(ev) => {\n                    ev.preventDefault();\n                    editCommentHandler(comment.id);\n                  }}\n                >\n                  <img src={editIcon} alt=\"edit icon\"></img>\n                </button>\n              )}\n              <button\n                type=\"button\"\n                className=\"button button--icon\"\n                onClick={(ev) => {\n                  ev.preventDefault();\n\n                  if (comment.id) {\n                    removeCommentHandler(comment.id);\n                  }\n                }}\n              >\n                <img src={deleteIcon} alt=\"delete icon\"></img>\n              </button>\n            </div>\n          </li>\n        ))}\n      </ul>\n    )\n  } else {\n    return (\n      <p className=\"info\">No comments</p>\n    );\n  }\n});\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport './NewCommentForm.scss';\nimport { NewComment, CommentFields } from '../../types';\n\nimport { useForm } from '../../helpers/useForm';\n\nimport { getPostCommentEdit } from '../../store/index';\nimport { addComment, setCommentsEdit, updateComment, setCommentsUpdated } from '../../store/commentsReducer';\n\ninterface NewCommentFormProps {\n  postId: number;\n}\n\nexport const NewCommentForm: React.FC<Pick<NewCommentFormProps, 'postId'>> = React.memo(({\n  postId,\n}) => {\n  const commentEdit = useSelector(getPostCommentEdit);\n  const dispatch = useDispatch();\n\n  const initialValues: NewComment = {\n    name: (commentEdit && commentEdit.name ? commentEdit.name : ''),\n    email: (commentEdit && commentEdit.email ? commentEdit.email : ''),\n    body: (commentEdit && commentEdit.body ? commentEdit.body : ''),\n    postId: postId,\n  };\n\n  useEffect(() => {\n    if (commentEdit) {\n      formData.name = commentEdit.name;\n      formData.email = commentEdit.email;\n      formData.body = commentEdit.body;\n    } else {\n      resetForm();\n      resetData();\n    }\n  }, [postId, commentEdit]);\n\n  const {\n    handleSubmit,\n    handleChange,\n    handleTextareaChange,\n    resetData,\n    isEditing,\n    data: formData,\n    errors\n  } = useForm<CommentFields>({\n    editing: !!commentEdit,\n    validations: {\n      name: {\n        pattern: {\n          value: '^[A-Za-z]*$',\n          message:\n            'You\\'re not allowed to use special characters or numbers in your name.',\n        },\n      },\n      email: {\n        pattern: {\n          value: '^[a-zA-Z0-9]+@[a-zA-Z0-9]+\\.[A-Za-z]+$',\n          message: 'Your email is not valid.',\n        },\n      },\n      body: {\n        custom: {\n          isValid: (value: string) => value.length < 151 && value.length > 3,\n          message: 'The comment should have from 4 to 150 characters.',\n        }\n      },\n    },\n    onSubmit: () => {\n      const newCommentFields = {\n        ...initialValues,\n        name: formData.name,\n        email: formData.email,\n        body: formData.body.replace(/^\\s+|\\s+$/g, ''),\n      }\n\n      if (commentEdit) {\n        updateCommentHandler(newCommentFields);\n      } else {\n        addCommentHandler(newCommentFields);\n      }\n\n      resetForm();\n    },\n  });\n\n  const resetForm = () => {\n    formData.name = '';\n    formData.email = '';\n    formData.body = '';\n    initialValues.name = '';\n    initialValues.email = '';\n    initialValues.body = '';\n  };\n\n  const updateCommentHandler = async (comment: NewComment) => {\n    const newComment = {\n      ...comment,\n      id: commentEdit.id,\n    };\n\n    await updateComment(commentEdit.id, newComment);\n    dispatch(setCommentsUpdated(true));\n  };\n\n  const addCommentHandler = async (comment: NewComment) => {\n    const date = Date.now().toString();\n    const newId = Number(date.substr(date.length - 6));\n    const newComment = {\n      ...comment,\n      id: newId,\n    };\n\n    await addComment(newComment);\n    dispatch(setCommentsUpdated(true));\n    dispatch(setCommentsEdit(newId));\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={(ev) => {\n        ev.preventDefault();\n        handleSubmit(ev);\n      }}\n      method=\"POST\"\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={formData.name || initialValues.name}\n          onChange={handleChange('name')}\n          required\n        />\n        {errors.name && <p className=\"NewCommentForm__error\">{errors.name}</p>}\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"email\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={formData.email || initialValues.email}\n          onChange={handleChange('email')}\n        />\n        {errors.email && <p className=\"NewCommentForm__error\">{errors.email}</p>}\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comments here\"\n          className=\"NewCommentForm__input\"\n          value={formData.body || initialValues.body}\n          required\n          onChange={(ev) => {\n            handleTextareaChange('body', ev.target.value);\n          }}\n        />\n        {errors.body && <p className=\"NewCommentForm__error\">{errors.body}</p>}\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        {isEditing() ? 'Update a comment' : 'Add a comment'}\n      </button>\n    </form>\n  );\n});\n","import { ChangeEvent, FormEvent, useState } from 'react';\n\ninterface Validation {\n  required?: {\n    value: boolean;\n    message: string;\n  };\n  pattern?: {\n    value: string;\n    message: string;\n  };\n  custom?: {\n    isValid: (value: string) => boolean;\n    message: string;\n  };\n}\n\ntype ErrorRecord<T> = Partial<Record<keyof T, string>>;\n\ntype Validations<T extends {}> = Partial<Record<keyof T, Validation>>;\n\nexport const useForm = <T extends Record<keyof T, any> = {}>(options?: {\n  validations?: Validations<T>;\n  initialValues?: Partial<T>;\n  editing: boolean;\n  onSubmit?: () => void;\n}) => {\n  const [data, setData] = useState<T>((options?.initialValues || {}) as T);\n  const [errors, setErrors] = useState<ErrorRecord<T>>({});\n  let valid = true;\n\n  // Needs to extend unknown so we can add a generic to an arrow function\n  const handleChange = (key: keyof T) => (e: ChangeEvent<HTMLInputElement>) => {\n    let value = e.target.value;\n    setData({\n      ...data,\n      [key]: value,\n    });\n  };\n\n  const handleTextareaChange = (key: keyof T, value: string) => {\n    setData({\n      ...data,\n      [key]: value,\n    });\n  };\n\n  const handleSubmit = async (e: FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const validations = options?.validations;\n    if (validations) {\n      const newErrors: ErrorRecord<T> = {};\n      for (const key in validations) {\n        const value = data[key];\n        const validation = validations[key];\n        if (validation?.required?.value && !value) {\n          valid = false;\n          newErrors[key] = validation?.required?.message;\n        }\n\n        const pattern = validation?.pattern;\n        if (pattern?.value && !RegExp(pattern.value).test(value)) {\n          valid = false;\n          newErrors[key] = pattern.message;\n        }\n\n        const custom = validation?.custom;\n        if (custom?.isValid && !custom.isValid(value)) {\n          valid = false;\n          newErrors[key] = custom.message;\n        }\n      }\n\n      if (!valid) {\n        setErrors(newErrors);\n        return;\n      }\n    }\n\n    setErrors({});\n\n    if (options?.onSubmit) {\n      options.onSubmit();\n    }\n  };\n\n  const isEditing = (): boolean => {\n    return options?.editing || false;\n  }\n\n  const resetData = () => {\n    if (!data) {\n      return;\n    }\n  \n    Object.keys(data).forEach(function(key) {\n      setData({\n        ...data,\n        [key]: '',\n      });\n    });\n  };\n\n  return {\n    valid,\n    data,\n    handleChange,\n    handleTextareaChange,\n    handleSubmit,\n    resetData,\n    isEditing,\n    errors,\n  };\n};\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { Comments } from '../Comments';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\n\nimport { isLoading, getSelectedPostId, getPost, arePostCommentsHidden } from '../../store';\nimport { fetchPost } from '../../store/postsReducer';\nimport { setCommentsHidden } from '../../store/commentsReducer';\n\nimport { Post } from '../../types';\n\nexport const PostDetails: React.FC = () => {\n  const postId = useSelector(getSelectedPostId);\n  const post: Post | null = useSelector(getPost);\n  const areCommentsHidden: boolean = useSelector(arePostCommentsHidden);\n  const loading = useSelector(isLoading);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (postId > 0) {\n      dispatch(fetchPost(postId));\n    }\n  }, [postId, dispatch]);\n\n  const toggleDisplayComment = (ev: React.MouseEvent<HTMLButtonElement>) => {\n    ev.preventDefault();\n\n    dispatch(setCommentsHidden(!areCommentsHidden));\n  };\n\n  return (\n    <div className=\"PostDetails\">\n      {loading ? (\n        <div className=\"loading\"></div>\n      ) :\n      postId > 0 && post ? (\n        <article className=\"PostDetails__post\">\n          <h2>{post.title}</h2>\n          <p>{post.body}</p>\n  \n          <div className=\"PostDetails__post-comments\">\n            {post.commentsCount > 0 &&\n              <button\n                type=\"button\"\n                className=\"button\"\n                onClick={toggleDisplayComment}\n              >\n                {areCommentsHidden ? 'Show ' : 'Hide '}\n                comments\n              </button>\n            }\n  \n            {!areCommentsHidden && (\n              <Comments postId={postId} />\n            )}\n            <div className=\"PostDetails__form-wrapper\">\n              <NewCommentForm\n                postId={postId}\n              />\n            </div>\n          </div>\n        </article>\n        ) : (\n          <p className=\"info\">No post details</p>\n        )\n      }\n    </div>\n  );\n};\n","import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useLocation } from 'react-router-dom';\n\nimport './App.scss';\n\nimport { getUsers } from './api/users';\n\nimport { User } from './types';\nimport { isLoading, getMessage } from './store';\nimport { setUsersList } from './store/postsReducer';\n\nimport { Filters } from \"./components/Filters\";\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from \"./components/PostDetails\";\n\nconst App: React.FC = () => {\n  const loading = useSelector(isLoading);\n  const message = useSelector(getMessage);\n\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search);\n  const selectedUserId = Number(searchParams.get('userId')) || 0;\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    getUsers()\n      .then((result: User[]|any) => {\n        dispatch(setUsersList(result));\n      });\n  }, [dispatch]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        {!message && (\n          <Filters />\n        )}\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList loading={loading} selectedUserId={selectedUserId} />\n        </div>\n        <div className=\"App__content\">\n          <PostDetails />\n        </div>\n      </main>\n\n      \n      {loading ?\n        <div className=\"alert\">Loading data...</div>\n      :\n        <div className={message ? 'alert alert--error' : 'alert'}>\n          {message ? message : 'Ready'}\n        </div>}\n    </div>\n  );\n};\n\nexport default App;\n","import { request } from './api';\n\nexport function getUsers() {\n  return request('users');\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport App from './App';\nimport store from './store';\n\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}